<?php
  if (array_key_exists("HTTP_ACCEPT", $_SERVER) &&
      stristr($_SERVER["HTTP_ACCEPT"], "application/xhtml+xml"))
  {
    header("Content-type: application/xhtml+xml");
    print("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
  }
  else
  {
    header("Content-type: text/html; charset=utf-8");
  }
 ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>Using PHP</title>
    <link rel="shortcut icon" href="./favicon.ico" />
    <link rel="stylesheet" type="text/css" media="all" href="../css/style-all.css" />
    <link rel="stylesheet" type="text/css" media="screen" href="../css/style-screen.css" />
    <link rel="stylesheet" type="text/css" media="print" href="../css/style-print.css" />
    <link rel="stylesheet" type="text/css" media="all" href="css/using_php.css" />
  </head>
  <body>
    <div id="header">
      <h1>Using PHP</h1>
    </div>
    <div id="content" class="whitebox">
      <h2>A Tiny PHP Tutorial</h2>
      <div>
        <p>
          PHP is a server-side scripting language that you can use to customize the content of web pages. In this
          mini-tutorial, you will see how to use PHP to customize the contents of a web page by using information from a
          form. To give us a concrete example to work with, we will assume a web page has the following form on it:
        </p>
        <form method="get" action="#result-paragraph">
          <fieldset>
            <legend>Login Here!</legend>
            <div class="form-line">
              <label for="email">Email:</label>
              <input type="text" id="email" name="email" />
            </div>
            <div>
              <label for="password">Password:</label>
              <input type="password" id="password" name="password" />
            </div>
            <button type="submit">Login</button>
          </fieldset>
        </form>
      </div>
      <p>Here is what the XHTML for that form looks like (approximately):</p>
      <div class="code-block">
        &lt;form method="get" action="scripts/login.php"&gt;
          &lt;fieldset&gt;
            &lt;legend&gt;Login Here!&lt;/legend&gt;
            &lt;div class="form-line"&gt;
              &lt;label for="email"&gt;Email:&lt;/label&gt;
              &lt;input type="text" id="email" name="email" /&gt;
            &lt;/div&gt;
            &lt;div&gt;
              &lt;label for="password"&gt;Password:&lt;/label&gt;
              &lt;input type="password" id="password" name="password" /&gt;
            &lt;/div&gt;
            &lt;button type="submit"&gt;Login&lt;/button&gt;
          &lt;/fieldset&gt;
        &lt;/form&gt;
      </div>
      <p>
        This form will send two name-value pairs to a script named <span class="file-name">login.php</span>, one named
        <span class="variable-name">email</span>, and the other named <span class="variable-name">password</span>.
      </p>
      <div class="standout-block">
        Although it is conventional to give PHP scripts file names that end in &ldquo;.php,&rdquo; they can actually
        end with any extension, provided the server that runs them has been configured to recognize the extension. For
        example, in the lab for this course, all the Apache servers have been configured to recognize either
        <span class="filename">.php</span> or <span class="filename">.xhtml</span> as the extensions of files that
        (might) contain PHP code. But they have not been configured to recognize other extensions, such as
        <span class="filename">.html</span>, so if you put PHP code inside a <span class="filename">.html</span>,
        file, it will never get executed, and the PHP code will be passed back to the browser, which will produce
        an erroneous web page because the PHP code that it receives is not HTML.
      </div>
      <p>
        The form above actually has a different value for its <span class="attribute-name">action</span> attribute from
        what is shown.  Instead of sending the form data to <span class="filename">scripts/login.php</span>, it actually
        submits the form to this web page (<span class="filename"><?php echo basename($_SERVER['SCRIPT_FILENAME']);
        ?></span>).  You can see the form in action by filling it in, clicking the Login button, and looking at the
        paragraph below, which was generated by a PHP script embedded in this page. Try changing the contents of the
        form’s input fields and seeing the changes in the paragraph when you resubmit the form:
      </p>
      <p id='result-paragraph'>
        <?php
          if (isset($_GET['email']))
          {
            if ($_GET['email'] === '')
            {
              echo "You did not type anything into the email field of the form, and ";
            }
            else
            {
              echo "The email address you entered was “".$_GET['email'].",” and ";
            }
            if ($_GET['password'] === '')
            {
              echo "you did not type anything into the password field of the form.\n";
            }
            else
            {
              echo "the password you entered was “".$_GET['password'].".”\n";
            }
          }
          else
          {
            echo "The form has not been submitted yet.\n";
          }
        ?>
      </p>
      <p>
        And here is what the PHP script that generated the text in the above paragraph looks like:
      </p>
      <div class="code-block">
        &lt;?php
          if (isset($_GET['email']))
          {
            if ($_GET['email'] === '')
            {
              echo "You did not type anything into the email field of the form, and ";
            }
            else
            {
              echo "The email address you entered was “".$_GET['email'].",” and ";
            }
            if ($_GET['password'] === '')
            {
              echo "you did not type anything into the password field of the form.";
            }
            else
            {
              echo "the password you entered was “".$_GET['password'].".”";
            }
          }
          else
          {
            echo "The form has not been submitted yet.";
          }
         ?&gt;
      </div>
      <p>
        The first thing to note is that PHP code has to be inside a tag that starts with <span
        class="code-snippet">&lt;?php</span> and ends with <span class="code-snippet">?&gt;</span>. There can be
        multiple instances of this tag on a web page if you want to use PHP to generate different parts of a page. For
        example, I can tell you that today is <?php echo date('F j, Y'); ?> because I inserted the date into this
        sentence using a second piece of PHP code, in addition to the one that generated the contents of the paragraph
        showing the form data earlier.
      </p>
      <p>
        The next thing to note is that PHP code is different from XHTML and CSS in a special way: XHTML marks up
        different parts of a web page’s contents, and CSS provides rules for what different parts of a web page are to
        look like, but PHP consists of a sequence of <span class="tech-term"
        title="an executable element of a program">statements</span> that perform actions. Statements get executed one
        after the other. Each one has to end with a semicolon.
      </p>
      <p>
        In the code above, the statements all start with the <span class="tech-term"
        title="a token that has a predifined meaning in a programming language">keyword</span>
        <span class="variable-name">echo</span>. Echo
        statements (do not capitalize the keyword; PHP, like most computer languages, is case-sensitive) cause the
        program to generate content into your web page. Echo statements consist of the keyword, <span
        class="keyword">echo</span>, a string of text inside quotes, and finally a semicolon at the end of the
        statement.
      </p>
      <p>
        The remainder of the PHP program is not part of the web page: the <span class="code-snippet">&lt;?php</span>,
        <span class="code-snippet">?&gt;</span>, and everything in between gets removed from the web page before it is
        returned to the browser. View the source code for this web page, and you will see no PHP code, only the XHTML
        and text content that I typed plus the XHTML and text content that were generated by PHP <span
        class="keyword">echo</span> statements, and there is nothing in to indicate which is which.
      </p>
      <h3>Variables</h3>
      <p>
        PHP programs use named <span class="tech-term"
        title="things that have names and can hold values">variables</span>, things that have names and can hold
        values, to get their interesting work done. As the
        word &ldquo;variable&rdquo; implies, the value of a variable can change. For example here are some PHP
        statements that show the kinds of thing variables can do:
      </p>
      <div class="code-block">
  &lt;?php
    $foo = 3;
    $bar = 5;
    $baz = $foo + $bar;
    $baz = $baz - 1;
    echo "&lt;p&gt;The answer is $baz.&lt;/p&gt;";
  ?&gt;
      </div>
      <p>
        There are rules for naming variables in PHP: the first character has to be a dollar sign, and the rest of the
        characters can be a mix of letters, digits, and underscores. Variable names are case-sensitive. The variable
        names <span class="variable-name">$foo</span>, <span class="variable-name">$bar</span>, and <span
        class="variable-name">$baz</span> in the example are sort of like <cite>lorem ipsum</cite> text: they are
        meaningless names
        that are used by convention when you don’t want to make up meaningful names. In real programs, you try to pick
        names for variables that tell what they are being used for.
      </p>
      <p>
        You can assign a value to a variable by putting the variable name on the left side of an equal sign and the
        value you want to assign to it on the right side of the equal sign. This kind of statement is called, not
        surprisingly, an <span class="tech-term" title="a statement that assigns a value to a variable">assignment
        statement</span>. The equal sign is an active thing: it doesn’t say that the left and right sides are the same
        thing, it says that as a result of executing the statement, the left side will have the value of the expression
        on the right. So the fourth statement above changes the value of <span class="variable">$baz</span> to be one
        less than what it was before the statement was executed.
      </p>
      <h3>Strings</h3>
      <p>
        PHP strings are pieces of text enclosed in single or double quotation marks. You can refer to simple variables
        inside strings that use double quotes, and the value of the variable will get <span class="tech-term"
        title="to substite the value of a variable for its name inside a string">interpolated</span> into the string.
        So the sample code above would generate a paragraph that says, &ldquo;The answer is 7.&rdquo;
      </p>
      <p>
        You can put strings together using dots to connect them. So <span class="code-snippet">"hello, world"</span> is
        the same as <span class="code-snippet">"hello" . ", wo" . "rld"</span>, an admittedly lame example but
        technically correct. Before we see why you need to know about this, we need to talk about &hellip;
      </p>
      <h3>Arrays</h3>
      <p>
        Arrays are lists of values. All the elements in the list have the same name, and the different ones are
        identified by subscripts, which can be either numbers or strings (or variables that hold numbers or strings!)
        enclosed in square brackets. Here is an example:
      </p>
      <div class="code-block">
&lt;?php
  $foo = array();
  $foo[0] = 123;
  $foo[1] = 456;
  $foo['favorite-food'] = "apple pie";
?&gt;
      </div>
      <p>
        The first statement made the variable <span class="variable-name">$foo</span> into an empty array. The next two
        statements assigned numeric values to the first two elements of the array (by convention, subscript values start
        at zero, but you can use any numbers you like, including negative ones),
        and the last statement uses one string for the subscript (favorite-food), and another string for its value
        (apple pie).
      </p>
      <p>
        Arrays are considered a somewhat advanced topic, but we need them to process our form data because the
        name/value pairs from the form are made available to a PHP script in a pre-defined array. If the form <span
        class="attribute-name">method</span> is <span class="attribute-value">get</span>, the name of the PHP array is
        <span class="variable-name">$_GET</span>, and if the form <span class="attribute-name">method</span> is <span
        class="attribute-value">post</span>, the name of the PHP array is <span class="variable-name">$_POST</span>. The
        subscripts for the array are the form data names, as strings, and the values of the array elements are the
        corresponding form values.
      </p>
      <p>
        So for the form at the top of this page, if you typed <span class="code-snippet">secret</span> into the password
        field, which has <span class="code-snippet">name="password"</span>, the PHP program will find that the value of
        <span class="variable-name">$_GET['password']</span> is the string <span class="variable-value">"secret"</span>.
      </p>
      <h3>Interpolating array values into strings</h3>
      <p>
        If you try to interpolate a reference to an array value into a string, such as 
        <span class="code-snippet">&lt;?php&nbsp;echo&nbsp;"The&nbsp;value&nbsp;is&nbsp;$_GET['password']";&nbsp;?&gt;</span>,
        it will not work. An easy way
        to fix the problem is to connect the string parts using dots:
        <span class="code-snippet">&lt;?php&nbsp;echo&nbsp;"The&nbsp;value&nbsp;is&nbsp;"&nbsp;.&nbsp;$_GET['password'];&nbsp;?&gt;</span>.
        There are other ways to do it, but at this stage, one technique
        that works should be sufficient.
      </p>
      <h3>Control Statements</h3>
      <p>
        The sample code uses what is called a <span class="tech-term">control statement</span> to make decisions about
        what to echo based on the values of variables. This particular control statement uses the keywords <span
        class="keyword">if</span> and <span class="keyword">else</span>. The generic syntax rule for this sort of
        statement is:
      </p>
      <div class="code-block">
  <span class="keyword">if</span> ( expression )
  {
    <em><span class="keyword">true</span> Statements</em>
  }
  <span class="keyword">else</span>
  {
    <em><span class="keyword">false</span> Statements</em>
  }
      </div>
      <p>
        Note that control statements don’t get a semicolon at the end of them.
      </p>
      <p>
        Following the <span class="keyword">if</span> is an expression inside parentheses, which is evaluated to be
        either <span class="keyword">true</span> or <span class="keyword">false</span>, which can be done using the
        <span class="keyword">===</span> comparison operator. In the sample code, <span
        class="code-snippet">($_GET['email'] === "")</span> is used to test if the value the user typed into the email
        field of the form is equal to an empty string (nothing between the two double quotes), producing <span
        class="keyword">true</span> if the user typed nothing and <span class="keyword">false</span> if the user typed
        anything at all.
      </p>
      <div class="standout-block">
        The difference between <span class="keyword">=</span> (the assignment operator) and <span
        class="keyword">===</span> (the equality tester) may not look like much when you see them written, but they are
        very different and you have to use each one only where it is appropriate if you are going to write PHP code that
        works.
      </div>
      <p>
        Following the <span class="code-snippet"><span class="keyword">if</span> (expression)</span> part, comes a block
        of one or more statements surrounded by curly braces (<span class="code-snippet">{&nbsp;&hellip;&nbsp;}</span>
        that will be executed if the value of the expression is <span class="keyword">true</span>. After that comes the
        keyword <span class="keyword">else</span> and another block of statements inside curly braces that will be
        executed if the value of the expression is <span class="keyword">false</span>. The <span
        class="keyword">else</span> and its block of statements can be omitted if they aren’t needed.
      </p>
      <p>
        The sample code for processing the form data shows a &ldquo;nested if&rdquo; structure: the true part of the
        first <span class="keyword">if</span> contains two entire <span class="keyword">if</span>&mdash;<span
        class="keyword">else</span> statements inside its <span class="keyword">true</span> block of statements. The
        nesting rules are much like those for XHTML tags: the inner statements must be completely contained inside the
        outer one and must not overlap each other.
      </p>
      <h3>Functions</h3>
      <p>
        There is one more feature of PHP that has to be mentioned, and that is the use of functions. Like variables,
        functions have names (except they do not start with dollar signs). Functions can be used as expressions that
        take <span class="tech-term" title="values passed to a function">arguments</span> and may return a <span
        class="tech-term" title="value returned by a function">result</span>. For example, the PHP expression <span
        class="code-snippet">sqrt(2)</span> passes the value 2 as an argument to a function named <span
        class="function-name">sqrt</span>; this function computes the square root of whatever argument is passed to it,
        and in this case returns the value <?php echo sqrt(2); ?>. (Could you guess that I let PHP &ldquo;type&rdquo;
        that number for me by inserting <span class="code-snippet">&lt;?php echo sqrt(2); ?&gt;</span> into the previous
        sentence?)
      </p>
      <p>
        Functions can return logical values, strings, or numbers. In the sample code, the function named <span
        class="function-name">isset()</span> is used to generate a logical value for the first <span
        class="keyword">if</span> statement, <span class="code-snippet">if (isset($_GET['email']) &hellip;</span> .  The
        problem solved by this <span class="keyword">if</span> test is that <span
        class="variable-name">$_GET['email']</span> only exists if the web page is actually invoked from a form that
        uses the <span class="attribute-name">get</span> method and has a data value named <span
        class="attribute-name">email</span>, and PHP will generate an error message if you try to access a variable that
        has not been assigned a value. The <span class="funtion-name">isset()</span> function returns <span
        class="keyword">true</span> if its argument has actually had a value assigned to it and <span
        class="keyword">false</span> otherwise, such as when you first loaded the page instead of submitting the form.
      </p>
      <p>
      	Functions can also return other things. For example the function named 
        <span class="function-name">array()</span>, shown earlier, returns an empty array that was assigned as the value
        of the variable <span class="variable-name">$foo</span>.
      </p>
      <p>
        One of the things that makes PHP so popular is the large number of functions that are built into the language:
        they are pieces of code that you can use to get a lot of work done without having to develop the code yourself.
        The down side of this feature is that just learning what functions are available is a significant piece of work.
        They are all well-documented, and a lot of the process of becomming a PHP programmer is getting familiar with
        them by looking them up in the PHP <a href="http://php.net/manual/en">online documentation</a>.
      </p>
      <h3>Summary</h3>
      <p>
        PHP is a rich programming language, and you cannot expect to master it all at once, but this page has introduced
        several key features of the language, enough that you should be able to generate a web page with content
        tailored to data sumbitted to it from a form.
      </p>
    </div>
    <div id="footer">
      <a href="../../">Vickery Home</a>&mdash;<a
         href="./">CS-081 Home</a>&mdash;<a
         href="http://validator.w3.org/check?uri=referer">XHTML</a>&mdash;<a
         href="http://jigsaw.w3.org/css-validator/check/referer">CSS
      </a>
    </div>
  </body>
</html>
