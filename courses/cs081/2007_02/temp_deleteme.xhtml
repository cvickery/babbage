<?php
  if (array_key_exists("HTTP_ACCEPT", $_SERVER) &&
      stristr($_SERVER["HTTP_ACCEPT"], "application/xhtml+xml") )
  {
    header("Content-type: application/xhtml+xml");
    print("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
  }
  else
  {
    header("Content-type: text/html; charset=utf-8");
  }
 ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

  <head>

    <title>Creating a Framed Picture</title>

    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="stylesheet"
          type="text/css"
          media="all"
          href="/courses/css/style-all.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="screen"
          href="/courses/css/style-screen.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="print"
          href="/courses/css/style-print.css"
    />
    <style type="text/css">
      .diagram {
        margin: 1.5em auto;
        text-align: center;
        }
      .boxed {
        padding:128px 0.5em 0.5em 0.5em;
        border: 1px solid black;
        }
      .tinted {
        background-color: #fee;
        color: #3f3;
        border: 1px solid black;
        }
    </style>

  </head>

  <body>

    <div id="header">
      <h1>Creating a Framed Picture</h1>
    </div>

    <div id="content" class="whitebox">

      <h2>Introduction</h2>
      <div class="whitebox">

        This page walks you through the process of developing a web page for
        displaying one picture from a gallery of photographs.  There are
        lots of photobloggers doing this sort of thing, and they use a
        variety of techniques to achieve some intersting effects, some of
        which involve Flash and/or Javascript.  But this page is different:
        it uses the photo gallery problem as a context for working with
        background images.
        
        <p>The background of a box extends from the outer edges of the
        box&rsquo;s border inward.  A box can have both a background color
        and a background image.  The image is in front of the color, so any
        transparent part of the image will let the background color show
        through.  For this exercise, we will create a <span
        class="techTerm" title="Darkening of an image around the edges.">
        vignette effect</span>.  Normally, vignetting is considered a defect
        caused by a poor quality lens, but some people like to use it as an
        artistic effect.  We will pretend a client has asked us to create
        this effect for a set pictures being displayed.</p>

        <p class="standoutBox"> In a perfect world, XHTML and CSS code that
        pass the w3.org validation tests will display the same in all
        browsers.  But the world is not perfect (sorry), and the techniques
        shown here will produce different results in different browsers. 
        However, these techniques produce nearly identical results in the
        current (as of the time of writing) versions of <span
        class="programName">Internet Explorer</span> (IE), <span
        class="programName">Firefox</span>, <span
        class="programName">Opera</span>, and <span
        class="programName">Safari</span>.  Most notably, the techniques
        shown here will <em>not</em> produce reasonable results using
        versions of IE numbered 6 and below.  In the real world, this fact
        would have to be addressed, possibly by detecting the brand and
        version of the  user&rsquo;s browser and redirecting those users to
        a different page with fewer features.</p>

      </div>

      <h2>XHTML Structure</h2>
      <div class="whitebox">

        The pages in this project will have three main sections: a header to
        hold the name of the picture, a content section to hold the picture
        itself, and a footer section that will contain two subsections, one
        for links for navigating through the gallery and another one for
        links for validating the markup and stylesheet.  It is natural to
        use <span class="tagName">div</span>s for each of these sections:

        <div class="codeBlock">
&lt;div id="header"&gt;
&lt;/div&gt;
&lt;div id="content"&gt;
&lt;/div&gt;
&lt;div id="footer"&gt;
  &lt;div id="navigation"&gt;
  &lt;/div&gt;
  &lt;div id="validation"&gt;
  &lt;/div&gt;
&lt;/div&gt;
        </div>

        The content section will contain a picture, a vignette surrounding
        the picture, and a clickable link for going to the next picture in
        the gallery.  There are two choices we need to make: (1) should
        the picture change size when the user changes the size of the
        viewport and/or the text size? (2) Should the vignette get clipped
        away when the viewport shrinks, or should it always be present?
        
        <p>For the first choice, our client has said that all pictures in
        the gallery have to have the same image size, 900&times;566 pixels,
        so we have to keep the picture size fixed.  Each picture in the
        gallery is prepared for the web using a program like <span
        class="programName">Fireworks</span> or <span
        class="programName">ImageReady</span> to set the height and width to
        fit in a canvas with these dimensions, with areas of the image that
        do not fill out to one dimension or the other (or both) set to a
        color that will match the background color of the content <span
        class="tagName">div</span>.  When the viewport is large enough for
        the content <span class="tagName">div</span> to exceed the <span
        class="techTerm"
        title="For a picture, the width and height of the image, in pixels">
        intrinsic size</span> of the picture, the background color of the
        <span class="tagName">div</span> will show around the picture.  For
        this project, we will use black as the background color, black as
        the color of the <span class="techTerm"
        title="When resizing images to a fixed size, the color used for non-image areas.">
        matte</span> surrounding the optimized image, and black as the color
        of the vignette.  You could use any set of matching colors for other
        effects.</p>

        <div class="codeBlock">
&lt;div id="top&gt;&lt;div id="right&gt;&lt;div id="bottom"&gt;&lt;div id="left"&gt;
  &lt;div id="header"&gt;
  &lt;/div&gt;
  &lt;div id="content"&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; 
&lt;div id="footer"&gt;
  &lt;div id="navigation"&gt;
  &lt;/div&gt;
  &lt;div id="validation"&gt;
  &lt;/div&gt;
&lt;/div&gt;
        </div>

        At this point, you can add an <span class="tagName">h1</span> to the
        header section with the name of the picture, an <span
        class="tagName">img</span> tag to the content section for the
        picture to be displayed, and all the links to the two footer
        sections.  As an added feature, you can surround the <span
        class="tagName">img</span> with a link (<span
        class="tagName">a</span> tag) to the next picture, repeating the
        functionality of the <span class="functionName">Next</span> link in
        the footer section.

        <p class="standoutBox">Do not use the <span
        class="attributeName">height</span> and/or <span
        class="attributeName">width</span> attributes in the <span
        class="tagName">img</span> tag; they will prevent the picture from
        changing size when the user changes the size of the browser
        window.</p>

      </div>

      <h2>Stylesheet Setup</h2>
      <div class="whitebox">

        While there are sound reasons for starting with a site-wide style
        sheet and either modifying it or supplementing it with a new sheet
        for the picture gallery, we will assume here that there is just one
        blank stylesheet for this project so we can avoid distractions due
        to settings that come from somewhere else.
        
        <p>Set up a link to your new stylesheet and initialize the sheet
        with the following rule:</p>
        
        <div class="codeBlock">
html, body {
  background-color: red;
  color:            green;
  font-family:      sans-serif;
  margin:           0;
  height:           100%;
  }
        </div>

        <p>The <span class="propertyName">color</span> and <span
        class="propertyName">background-color</span> properties are there
        simply so we can tell if they are in effect when we don&rsquo;t
        expect them to be.</p>
        
        <p>The <span class="propertyName">font-family</span> property is a
        matter of personal preference.  Most people think that sans-serif
        fonts (like Helvetica and Arial) are easier to read on a screen and
        that serif fonts (like Times Roman) are easier to read on printed
        pages.</p>
        
        <p>The last two properties are very important for getting the page
        to work correctly.  The margin has to be set to zero because by
        default most browsers put a margin around the content of web pages,
        which would show up as a red border around the edges of the <span
        class="techTerm"
 title="The part of a browser window where web pages are displayed.">viewport</span>.
        The margin setting is necessary because there is no standard for
        whether the <span class="tagName">html</span> and/ or <span
        class="tagName">body</span> should have a margin or not.  Remember,
        each browser has a default built-in default stylesheet that it uses
        for displaying page elements in the absense of any other stylesheet
        rules.</p>
        
        <p>The <span class="attributeName">height</span> attribute, on the
        other hand, illustrates a basic CSS rule: by default boxes are made
        large enough to contain their content, and no larger.  To get the
        footer <span class="tagName">div</span> to stick to the bottom of
        the viewport, the browser has to make the height of the <span
        class="tagName">body</span> match the height of the viewport, no
        matter how the user decides to resize the browser window.</p>
        
        <p>Finally, the following two rules will divide the viewport so that
        the content and footer <span class="tagName">div</span>s together
        fill the entire height of the viewport.  The background colors will
        be the ones used for the project: The content will be white except
        where we put the picture and its frame, and the footer area will be
        all black, with light colored lettering for any text that appears
        there:</p>
        
        <div class="codeBlock">
  #content {
    height:           85%;
    color:            black;
    background-color: white;
    }
  #footer {
    height:           15%;
    color:            white;
    background-color: black;
    }
        </div>
        
        With this stylesheet in place, you should be able to view your web
        page in any of the current browsers and see plain white in the top
        85% of the viewport and plain black in the bottom 15% of the
        viewport.  The red background assigned to the html and body elements
        should be completely covered.  (Actually, Opera and Safari both
        leave a one-pixel high piece of the background showing along the
        bottom of the viewport.  IE 6 processes this part of the project
        correctly.)

      </div>

      <h2>Background Images</h2>
      <div class="whitebox">

        Before adding the picture frame border to the project, note that
        background images are going to be made up of pictures with certain
        &ldquo;intrinsic&rdquo; pixel dimensionalities.  That is, the size
        of a background image is whatever size is built into the image file,
        and there is no way to change it.  (In contrast, images that are
        part of a page&rsquo;s content can have their intrinsic sizes
        altered in a number of ways.)  What CSS does provide for background
        images is control over how a background image repeats over the
        background: horizontally, vertically, in both directions (called
        &ldquo;tiling&rdquo;) or not at all:

        <p class="center"><img src="images/background-repeat.png" 
        alt="illustrate background-repeat property" /></p>
        
        The strategy for making the background into a picture frame is to
        have the top and bottom be very narrow images with their heights
        equal to the thickness of the frame we want and to make them repeat
        horizontally across the width of the frame.  Likewise, the left and
        right sides will be have widths equal to the thickness of the frame,
        will be very short, and will repeat vertically along he height of
        the frame.  Practically speaking, &ldquo;very narrow&rdquo; and
        &ldquo;very short&rdquo; can be as small as one pixel wide or one
        pixel high, leading to very modestly-sized image files. But
        one-pixel thick images images are hard to work with, so we will use
        rectangles with a smaller dimension of 16 pixels instead of just
        one.  Finally, to create an interesting effect, we will make the
        frame edges fade to transparency so they will blend with the
        background color as they go from the outside towards the inside. 
        For example, if the frame color is black, these four images could be
        used:

        <div class="diagram">
          <span class="boxed">
          Top:    <img  src="images/borders/top_border.png"
                        alt="frame_border_pieces.png" /></span>
          <span class="boxed">
          Right:  <img  src="images/borders/right_border.png"
                        alt="frame_border_pieces.png" /></span>
          <span class="boxed">
          Bottom: <img  src="images/borders/bottom_border.png"
                        alt="frame_border_pieces.png" /></span>
          <span class="boxed">
          Left:   <img  src="images/borders/left_border.png"
                        alt="frame_border_pieces.png" /></span>
        </div>

        To show the significance of a gradient fading to transparency,
        here are the same four images against a tinted background.  Instead
        of fading to white, they now fade to pink:

        <div class="diagram">
          <span class="tinted boxed">
          Top:    <img  src="images/borders/top_border.png"
                        alt="frame_border_pieces.png" /></span>
          <span class="tinted boxed">
          Right:  <img  src="images/borders/right_border.png"
                        alt="frame_border_pieces.png" /></span>
          <span class="tinted boxed">
          Bottom: <img  src="images/borders/bottom_border.png"
                        alt="frame_border_pieces.png" /></span>
          <span class="tinted boxed">
          Left:   <img  src="images/borders/left_border.png"
                        alt="frame_border_pieces.png" /></span>
        </div>

        A final piece of houskeeping is for you to attach each border to the
        proper edge of its <span class="tagName">div</span>, using the <span
        class="propertyName">background-position</span> property.  This
        property defaults to a value of &ldquo;top left&rdquo;, so you
        really only need to specify it for the bottom and right borders:

        <div class="codeBlock">
#bottom {
  height:               100%;
  background-image:     url(images/borders/bottom_border.png);
  background-repeat:    repeat-x;
  background-position:  bottom;
  }
        </div>

        But it a good idea to specify it explicitly for all four borders.

        <p>You can download copies of the four images by right-clicking on
        them above, or you can go to the <a href="images/borders/">images
        download page</a>, where you can pick them up along with the SVG
        files that were used to draw them.  You can edit the SVG files using
        the <span class="programName">InkScape</span> program available in
        the lab.  (You can download the current version of this program for
        free from the <a href="http://inkscape.org">inkscape.org</a> web
        site.)</p>

      </div>

      <p class="pageIncomplete">To be continued ...</p>

    </div>

    <div id="footer">
    <hr />
      <p class="links">
        <a href="/">Vickery Home</a>&nbsp;-&nbsp;
        <a href="http://validator.w3.org/check?uri=referer">
        XHTML</a>&nbsp;-&nbsp;
        <a href="http://jigsaw.w3.org/css-validator/check/referer">
        CSS</a>
      </p>
      <p><em>Last updated
        <?php echo date("Y-m-d", filemtime($_SERVER['SCRIPT_FILENAME']));
        ?>.</em>
      </p>
    </div>
  </body>
</html>
