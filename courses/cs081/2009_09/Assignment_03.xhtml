<?php
  header("Vary: Accept");
  if (  array_key_exists("HTTP_ACCEPT", $_SERVER) &&
        stristr($_SERVER["HTTP_ACCEPT"], "application/xhtml+xml") ||
        stristr($_SERVER["HTTP_USER_AGENT"], "W3C_Validator")
      )
  {
    header("Content-type: application/xhtml+xml");
    header("Last-Modified: "
                    .gmdate('r',filemtime($_SERVER['SCRIPT_FILENAME'])));
    print("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
  }
  else
  {
    header("Content-type: text/html; charset=utf-8");
  }
 ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

  <head>

    <title>CS-081 Assignment 3</title>

    <link rel="shortcut icon" href="../favicon.ico" />
    <link rel="stylesheet"
          type="text/css"
          media="all"
          href="../../css/style-all.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="screen"
          href="../../css/style-screen.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="print"
          href="../../css/style-print.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="all"
          href="../../css/assignments.css"
    />
    <script type="text/javascript" src="../../scripts/core.js"></script>
    <script type="text/javascript" src="../../scripts/round-corners.js"></script>
  </head>

  <body id='urn:uuid:C1E83BDD-C8FC-4756-8F3F-0E6FC903F401'>
    <h1>CS-081 Assignment 3</h1>
    <h2>Introduction</h2>
    <div>
      For this assignment, you are to create a text-only web page with a mix of headings and paragraphs, and use a
      stylesheet to format various elements in distinctive ways. It&rsquo;s an exercise in working with CSS selectors
      and property lists.
    </div>
    <h2>Lab Activities.</h2>
    <div>
      <ol>
        <li>
          <h5>Set up the content of the web page.</h5>
          <p class="run-in">
            Modify your <span class="fileName">index.xhtml</span> file so it has the following structure:
          </p>
          <ol>
            <li>
              An <span class="tagName">h1</span> element. Make the content of this element either &ldquo;My Term
              Paper&rdquo; or something more creative.
            </li>
            <li>
              An <span class="tagName">h2</span> followed by three paragraphs. Insert <span class="functionName">Lorem
              Ipsum</span> text generated at <a href="http://lipsum.com">lipsum.com</a> into the paragraphs.  Note that
              the paragraphs are to consist of dummy Latin text that you get by clicking the &ldquo;Generate lorem
              ipsum&rdquo; button on that page, not the English paragraphs on the web page you get to when you land
              there.
              <p>
                As demonstrated in class, you have to surround each paragraph generated by lipsum.com with
                <span class="tagName">p</span> tags.
              </p>
              <p>
                Also, it is better to reformat the text in the paragraphs so they fit in
                your editing window without having to scroll sideways, but this is not a strict requirement
                  for the assignment.
              </p>
              <p>
                Make the contents of the <span class="tagName">h2</span> either &ldquo;Introduction&rdquo; or something
                more creative.
              </p>
            </li>
            <li>
              An <span class="tagName">h2</span> followed by two paragraphs, an <span class="tagName">h3</span>, and two
              more paragraphs.
              <p>
                Fill the paragraphs with more <span class="functionName">Lorem Ipsum</span> text, and make the contents
                of the <span class="tagName">h2</span> either &ldquo;First Topic&rdquo; or something more creative. Make
                the contents of the <span class="tagName">h3</span> &ldquo;First Subtopic&rdquo; or something more
                creative. Note that if you choose to be creative, there should be a logical relationship between the
                contents of the various levels of headings.
              </p>
            </li>
            <li>
              An <span class="className">h2</span> followed by a <span class="functionName">div</span>.  Put one
              paragraph, an <span class="tagName">h3</span>, and three more paragraphs inside the <span
              class="tagName">div</span>.  Fill the paragraphs with more Lorem Ipsum text. Make the contents of the
              headings either &ldquo;Second Topic&rdquo; and &ldquo;Second Subtopic&rdquo; or something more creative.
            </li>
          </ol>
          <p>
            Save your index page and be sure it displays correctly and passes XHTML validation with no warnings or
            errors when you click on the XHTML link at the bottom of the page.
          </p>
        </li>
        <li>
          <h5>Set up a stylesheet for your web page and be sure it works.</h5>
          <p class="run-in">
            If you have not done so already, create a directory named <span class="directoryName">css</span> in your
            <span class="directoryName">My Website</span> directory. Make the directory name lower-case to avoid
            problems and confusion later on. You can do this in Dreamweaver by right-clicking on the top folder in your
            site and selecting &ldquo;New Folder,&rdquo; and then renaming the folder as &ldquo;css&rdquo; as described
            in the <a href="../using_dreamweaver.xhtml">Dreamweaver Setup</a> page.
          </p>
          <p>
            Right click on the <span class="directoryName">css</span> directory, and select &ldquo;New File.&rdquo;
            Rename the file &ldquo;assignment_03.css,&rdquo; and open it for editing in Dreamweaver. Delete all code
            from the file that Dreamweaver might have put there, and add the following css rule:
          </p>
          <div class="code-block">
html, body {
  background-color:black;
  color:white;
  }
          </div>
          <p>
            Save your stylesheet.
          </p>
          <p>
            Now add a link to the stylesheet to the <span class="tagName">head</span> of your
            <span class="fileName">index.xhtml</span> page. (Put it right after the <span class="tagName">title</span>.)
          </p>
          <div class="code-block">
  &lt;link rel="stylesheet" type="text/css" href="css/assignment_03.css" /&gt;
          </div>
          <p>
            Be sure you use exactly the same spelling and capitalization for &ldquo;css&rdquo; and
            &ldquo;assignment_03.css&rdquo; in the <span class="tagName">link</span> as you used when created the
            directory and file.  </p> <p> Save your web page, and view it using Firefox; verify that it comes up with
            white text on a black background. If not, you have to figure out what is wrong and fix the problem before
            proceeding.
          </p>
        </li>
        <li>
          <h5>Do a case-sensitive link check before proceeding.</h5>
          <p class="run-in">
            Click on the <span class="menu-item">Site&rarr;Manage Sites</span> menu and edit your site: verify that
            &ldquo;Case-sensitive links&rdquo; is checked. (Or turn it on now if is not already checked.) Now
            right-click on the top line of your site in the left-hand panel, and select &ldquo;Check Links&rdquo; from
            the drop-down menu. It doesn&rsquo;t matter whether you specify the entire site or just the selected files
            because you have selected the entire site anyway.
          </p>
          <p>
            A Report panel will open up at the bottom of the editing pane telling you if there are any broken links.  If
            there are any, fix them before proceeding. The idea is to avoid any problems when I copy your site from
            Windows (case-preserving) to Macintosh on babbage (case-sensitive) for grading.
          </p>
        </li>
        <li>
          <h5>Use DOM Tree selection operators: space, &gt;, and +.</h5>
          <p class="run-in">
            In the previous step you used a comma-separated list of tag names as the selector for a rule. In this step,
            you are to add three rules that use the DOM Tree selection operators
          </p>
          <ul class="whitebox">
            <li>
              <h5>Use the descendent operator (space)</h5>
              <p  class="run-in">
                If you separate two parts of a selector with a space (no comma), you will select all instances of the
                second part that are descendents of the first part. To do this (and the next) step, modify your index
                page as follows: add a <span class="tag-name">span</span> tag around one of the words in the <span
                class="tag-name">h1</span> element&rsquo;s content and another <span class="tag-name">span</span> tag
                around one of the Latin words in the first paragraph of the Introduction.
              </p>
              <p>
                Use the selector, <span class="code-snippet">body span</span> to select all the span elements that are
                descendents of the body element. For the property list, make the <span
                class="property-name">color</span> property <span class="property-value">blue</span>. For the rest of
                the assignment, you should be able to figure out how to translate sentences like the previous two into a
                CSS rule.  But to get you started, here is what your <span class="fileName">assignment_03.css</span>
                should look like at this point:
              </p>
              <div class="code-block">
html, body {
  background-color:black;
  color:white;
  }
body span {
  color:blue;
  }
              </div>
              <p>
                Save the stylesheet, reload the web page, and verify that both the words you put spans around are now
                displayed in blue.
              </p>
            </li>
            <li>
              <h5>Use the child operator (&gt;)</h5>
              <p class="run-in">
                Now add a rule that selects all spans that are children of paragraph (<span class="tag-name">p</span>)
                elements, and make their <span class="property-name">background-color</span> value <span
                class="gray">gray</span>. Save the stylesheet, reload the page, and verify that the span inside the
                paragraph, but not the one inside the heading, now has a gray background.
              </p>
              <p>
                Modify this same rule to to select spans that are children of paragraphs and spans that are children of
                body elements. (<span class="code-snippet">p&gt;span, body&gt;span</span>) Save the stylesheet and reload the page:
                verify that nothing changes. The span in the heading is a descendent of the body element, but it is not
                a child of the body, so it is not selected to get a gray background. The span inside the paragraph
                continues to be selected for the gray background treatment, though.
              </p>
              <p class="standout-block">
                This experiment makes the point that you can easily make selectors that do not select anything, and
                there will be no error messages to warn you. If you click on the CSS link at the bottom of the page, you
                should see no errors or warnings: as long as the syntax is right, it is all right with the Internet if
                you make up CSS rules that don&rsquo;t do anything. The only problem would be if you put in a rule
                because you thought it would do something and it had no effect. Then you have to do some detective work
                to figure out what you did wrong.
              </p>
            </li>
            <li>
              <h5>Use the next sibling operator (+)</h5>
              <p class="run-in">
                Add a rule to your stylesheet that uses the + operator to select paragraphs that are the next sibling of
                <span class="tag-name">h2</span> elements. Make those paragraphs have yellow text on a green background.
              </p>
              <p>
                Save your stylesheet, reload the web page, and verify that the first paragraph after each level-2
                heading now has yellow text on a green background. (We will learn to use more subtle colors later in the
                course.)
              </p>
              <p>
                The word in the first paragraph that had the blue text and gray background still has those two
                properties.  The <a href="http://www.w3.org/TR/CSS2/cascade.html">W3C CSS Specification</a> says nothing
                about this case (that I can find), but all browsers tested seem to agree that the page should be
                rendered (drawn) this way. I infer that the browsers work their way down the DOM tree and use gray
                background because the span is lower in the tree than the paragraph that contains it. It is not a good
                idea to rely on something like this that is not explicitly and clearly stated in the W3C specifications;
                this is a case where
                a <span class="attribute-name">class</span> attribute should be used with the span (see below.)
              </p>
            </li>
          </ul>
        </li>
        <li>
          <h5>Use <span class="attribute-name">class</span> (.) selectors.</h5>
          <p class="run-in">
            Add the <span class="attribute-value">important</span> <span class="attribute-name">class</span> to the
            first two paragraphs of the introduction. (<span class="code-snippet">&lt;p class="important"&gt;</span>)
          </p>
          <p>
            Now add a CSS rule that makes everything of class <span class="attribute-value">important</span> display
            in italics. (<span class="code-snippet">font-style:italic;</span>)
          </p>
          <p>
            Verify that the two paragraphs are displayed as expected and that the page is still valid XHTML and CSS.
          </p>
          <p>
            How could you have accomplished the same thing without using a class?
          </p>
        </li>
        <li>
          <h5>Use <span class="attribute-name">id</span> (#) selectors.</h5>
          <p class="run-in">
            Add an <span class="attribute-name">id</span> attribute with the value <span
            class="attribute-name">target</span> to the second paragraph.
          </p>
          <p>
            Add a CSS rule that makes the element with the <span class="attribute-value">target</span> id boldface.
            (The property name is <span class="property-name">font-weight</span>, and the value to use is
            &ldquo;bold&rdquo;.)
          </p>
          <p>
            Verify your work.
          </p>
        </li>
        <li>
          <h5>Decide how to change the appearance of the <span class="tag-name">div</span> element.</h5>
          <p>
            Make the <span class="tagName">div</span> have black text on a white background. Use what you think is the
            &ldquo;best&rdquo; technique you have learned in this assignment to implement this feature. When you submit
            the assignment, include a sentence telling me which technique you chose and why.
          </p>
          <p>
            <strong>Optional: </strong> Instead of using black on white for the text, use the &ldquo;color picker&rdquo;
            that pops up when you type in the color and background-color property names to select two other colors than
            black and white. Make sure the two colors contrast with each other enough so the text is clearly legible.
          </p>
        </li>
      </ol>
    </div>
    <h2>Submit The Assignment</h2>
    <div>
      <p>
        Once you have set up your web site and tested that both the XHTML and CSS links at the bottom of the page give
        you no warnings and no errors, log out of your account so your site will be copied to the server. I will copy
        your site from the server to the computer in my office (babbage) to check it out.
      </p>
      <p class="standout-block">
        Remember: even if your site validates perfectly, you still have to make sure that all the CSS rules actually
        work as you intended. Testing your web page and fixing any unexpected appearances is a critical component of all
        the assignments for this course.
      </p>
      <p>
        When you finish your assignment, send me an email message telling me that it is ready. Use
        <span class="code-snippet">CS-081 Assignment 3</span>
        as the subject line. Make it look just like that to avoid my spam filters. Send the email to:
        <span class="variable-name">vickery<span class="at" title="change to @">at</span>babbage.cs.qc.cuny.edu</span>.
      </p>
    </div>
    <div id="footer">
      <a href="../../../">Vickery Home</a>&mdash;<a
         href="../">Course Home Page</a>&mdash;<a
         href="http://validator.w3.org/check?uri=referer">XHTML</a>&mdash;<a
         href="http://jigsaw.w3.org/css-validator/check/referer">CSS</a>&mdash;Last
         updated <?php echo date("Y-m-d", filemtime('course_calendar.xml')); ?>
    </div>
  </body>
</html>
