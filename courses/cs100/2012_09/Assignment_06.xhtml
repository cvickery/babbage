<?php
  $mime_type = "text/html";
  $html_attributes="lang=\"en\"";
  if ( array_key_exists("HTTP_ACCEPT", $_SERVER) &&
        (stristr($_SERVER["HTTP_ACCEPT"], "application/xhtml") ||
         stristr($_SERVER["HTTP_ACCEPT"], "application/xml") )
       ||
       (array_key_exists("HTTP_USER_AGENT", $_SERVER) &&
        stristr($_SERVER["HTTP_USER_AGENT"], "W3C_Validator"))
     )
  {
    $mime_type = "application/xhtml+xml";
    $html_attributes = "xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"";
    header("Content-type: $mime_type");
    echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
  }
  else
  {
    header("Content-type: $mime_type; charset=utf-8");
  }
?>
<!DOCTYPE html>
<html <?php echo $html_attributes;?>>
  <head>
    <title>CSCI 100 Assignment 6</title>
    <link rel="shortcut icon" href="../favicon.ico" />
    <link rel="stylesheet"
          type="text/css"
          media="all"
          href="../../css/assignments.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="print"
          href="../../css/assignments-print.css"
    />
  </head>
  <body>
    <h1>CSCI 100 Assignment 6</h1>
    <h2>Binary Counter</h2>
    <div>
      <h3>Reading Assignment</h3>
      <p>
        Read chapters 5-7 of the Gleick book.
      </p>
      <h3>Coding Assignment and Questions</h3>
      <div>
        <p>
          Your assignment is to code the Teagueduino your group built so that it operates
          as a “binary counter.” You are to develop two differnt implementations: one that
          requires no inputs, and one that operates only when a button attached to IN_1 is
          pressed.
        </p>
        <p>
          Work with your group to develop the code for this assigment. You will satisfy
          the coding part of the assignment when your group shows me a working binary
          counter (see below for details). You should also work with your group to
          determine the answers to the questions given here, but <strong>each person is to
          write out and hand in his or her own answers to the questions.</strong>
        </p>
        <p>
          We started working on this project when I introduced the idea that one output
          could be made to flash once a second using code like this:
        </p>
        <blockquote>
          <pre>
            delay(500);
            if (OUT_A == 1) {
              OUT_A = 0 as DIG;
            } else {
              OUT_A = 1 as DIG;
            }
          </pre>
        </blockquote>
        <p>
          <strong>Question 1.</strong>
          Explain how the <em>delay(500)</em> causes OUT_A to “flash once a second.” What
          is the <em>frequency</em> of the output pulses? What is the <em>period</em> of
          the output waveform? What is the <em>pulse width</em> of this waveform?
       </p>
        <p>
          <strong>Question 2.</strong>
          Draw the waveform for the value of OUT_A. Label the axes; show the scale for the
          X axis. Show at least four cycles.
        </p>
        <p>
          <strong>Question 3.</strong>
          What would be the <em>frequency</em>, <em>period</em>, and <em>pulse width</em>
          for OUT_A using the following code:
        </p>
        <blockquote>
          <pre>
            OUT_A = 1 as DIG;
            delay(250);
            OUT_A = 0 as DIG;
            delay(750);
          </pre>
        </blockquote>
        <p>
          Next we looked at making OUT_B turn on and off at half the rate of OUT_A. The
          idea was that would could make OUT_B change state only if OUT_A was on:
        </p>
        <blockquote>
          <pre>
            delay(500);
            if (OUT_A == 1) {
              OUT_A = 0 as DIG;
            } else {
              OUT_A = 1 as DIG;
            }
            if (OUT_A == 1) {
              if (OUT_B == 1 ) {
                OUT_B = 0 as DIG;
              } else {
                OUT_B = 1 as DIG;
              }
            }
          </pre>
        </blockquote>
        <p>
          <strong>Quesntion 4.</strong>
          What are the <em>frequency</em>, <em>period</em>, and <em>pulse width</em> of
          the waveform generated by OUT_B?
        </p>
        <p>
          <strong>Quesntion 5.</strong>
          Draw at <em>timing diagram</em> for OUT_A and OUT_B that shows two complete
          cycles of OUT_B. At timing diagram in this case is just two waveforms, one above
          the other with the same X axis for both.
        </p>
        <p>
          Repeating the code to test OUT_A twice in the previous example seems like some
          wasted effort. Consider:
        </p>
        <blockquote>
          <pre>
            delay(500);
            if (OUT_A == 1) {
              if (OUT_B == 1) {
                OUT_B = 0 as DIG;
              } else {
                OUT_B = 1 as DIG;
              }
              OUT_A = 0 as DIG;
            } else {
              OUT_A = 1 as DIG;
            }
          </pre>
        </blockquote>
        <p>
          <strong>Question 6.</strong>
          The second version actually operates differently from the first one. Run both
          versions in your Teagueduino, and tell what the difference is, based on looking
          at the pattern in which the LEDs flash. Then explain the difference in terms of
          how the two pieces of code work.
        </p>
        <p>
          <strong>Question 7.</strong>
          If you consider the two outputs to be a two-bit binary number, both programs
          cycle throught all four possible combinations of two bits. If the sequence is
          00, 01, 10, 11 the program is said to be a “two-bit binary up counter,” and if
          the sequence is 11, 10, 01, 00, it is a “two-bit binary down counter.” Extend
          the code to implement a 5-bit binary up counter.
        </p>
        <p>
          <strong>Question 8</strong>
          What is the <em>period</em> of the five-bit binary counter?
        </p>
        <p>
          There is another Teagueduino statment that we have not examined yet:
        </p>
        <blockquote>
          <pre>
            waituntil (IN_1 &gt; 750);
            OUT_A = 1 as DIG;
            waituntil (IN_1 &lt; 250);
            OUT_A = 0 as DIG;
          </pre>
        </blockquote>
        <p>
          You can almost read the code in English and understand what it does: wait until
          IN_1 has a value greater than 750, then turn on OUT_A. Then wait until IN_1 has
          a value less than 250, and turn off OUT_A. If you connect a button to IN_1, the
          actual values that IN_1 will take will always be 0 or 1000, so the above code
          could start “<code>waituntil (IN_1 == 1000);</code>” But ”edge cases”
          (situations where inputs are at or near their limits) can often cause problems
          when writing code, and it’s generally wiser to be sure to accept a range of
          input values rather than to count on detecting exactly the limiting case.
        </p>
        <p>
          While the above code illustrates how the waituntil statement can be used, let’s
          quickly point aout that this particular example accomplishes the same thing as
          the single statement:
        </p>
        <blockquote>
          <pre>
            OUT_A = IN_1 as DIG;
          </pre>
        </blockquote>
        <p>
          <strong>Question 9.</strong>
          But now you can use your binary counter to count button presses instead of
          seconds. <strong>Save your <em>five-bit seconds counter</em></strong>, and then
          program your Teagueduino as a <em>five-bit button-press counter</em>. Save the
          button press counter as a separate file.
        </p>
        <p>
          Annotate your code for both counters and print the web pages for both programs,
          along with your answers to these questions. Remember, I expect to receive the
          same code from everyone in your group (and I will know that it works because I
          will have seen it run in class), but each person is to write out his or her
          own answers to the questions, even if you work with the others in your group to
          figure them out.
        </p>
      </div>
    </div>
    <footer>
      <a href='.'>Course Schedule</a>
      <a target='_blank' href="http://validator.w3.org/check?uri=referer">Validate XHTML</a>
      <a target='_blank' href="http://jigsaw.w3.org/css-validator/check/referer?profile=css3">
      Validate CSS</a>
    </footer>
  </body>
</html>
