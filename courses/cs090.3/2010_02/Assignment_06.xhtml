<?php
  header("Vary: Accept");
  if ( array_key_exists("HTTP_ACCEPT", $_SERVER) &&
       stristr($_SERVER["HTTP_ACCEPT"], "application/xhtml+xml") ||
       stristr($_SERVER["HTTP_USER_AGENT"], "W3C_Validator") )
  {
    $mime_type = "application/xhtml+xml";
    header("Content-type: $mime_type");
    print("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
  }
  else
  {
    $mime_type = "text/html";
    header("Content-type: $mime_type; charset=utf-8");
  }
 ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
                      "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>CS-90.3 Assignment 6</title>
    <link rel="shortcut-icon" href="../favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../../css/assignments.css" />
    <link rel="stylesheet" type="text/css" href="../../css/assignments-print.css" media="print" />
    <style type="text/css">
      .line-numbers {
        float:left;
        width:1em;
        background-color:#ff9;
        overflow:hidden;
      }
      .line-numbers+* {
        float:left;
        width:90%;
      }
    </style>
  </head>
  <body id='urn:uuid:4F402184-1F45-4E90-97D1-296D130D392F'>

    <h1>CS-90.3 Assignment 6</h1>

    <div id="content">
      <h2>Overview and Preparation</h2>
      <div>
        <p>
          This is the same as Assignment 5, but implemented using CSS rules and <span
          class="attribute-name">class</span> attributes rather than direct manipulation of the style properties of the
          paragraphs in the DOM tree.
        </p>
        <p>
          Create a new script file, <span class="file-name">assignment_06.js</span>, to replace the script file you
          used for Assignment 5.
        </p>
        <p>
          You can use the same stylesheet as for Assignment 5, but add the following rules to it:
        </p>
        <p class="code-block">
.happy {
  color:red;
  }
.sad {
  color:blue;
  }
.envious {
  color: green;
  }
.excited {
  font-style:italic;
  }
        </p>
        <p>
          The idea is for various sequences of mouseover and mouseout events to cause the paragraphs to change color and
          font-style by manipulating each paragraph's <span class="attribute-name">class</span> attribute. Each time the
          user mouses over a paragraph, it’s class is to change to the next class in the sequence happy, envious, and
          sad. In addition, the paragraph’s class is to alternate between excited and not on alternate mouseover events.
        </p>
        <p>
          Unlike Assignment 5, the state of each paragraph is <em>not</em> to change when there are mouseout events.
          That is, <span class="file-name">assignment_06.js</span> will not have a <span
          class="function-name">mouseoutHandler()</span> function.
        </p>
      </div>
      <h2>The Assignment</h2>
      <div>
        <ol>
          <li>
            <h5>Set up the mouseover event handler for this assignment.</h5>
            <p>
              Create a <span class="variable-name">window.onload</span> event handler function the way you did for
              Assignment 5, and add a function named <span class="variable-name">mouseoverHandler</span> to it, again,
              the way you did for Assignment 5. Set this function up as the mouseover event handler for all the
              paragraphs in the document. Temporarily insert a <span class="variable-name">console.log()</span> function
              call that prints a simple message, such as “mouseover” and verify that the message is displayed each time
              you move your mouse over any paragraph in the web page.
            </p>
          </li>
          <li>
            <h5>Add the class management functions from the textbook.</h5>
            <p>
              Add three more functions to the <span class="variable-name">onload</span> event handler function: <span
              class="variable-name">hasClass()</span>, <span class="variable-name">addClass()</span>, and <span
              class="variable-name">removeClass()</span>. The code for these three functions is given on pages
              383&mdash;384. Note that you will need to change each function definition so the functions are defined in
              your onload function instead of the (nonexistent) <span class="variable-name">Core</span> object assumed
              to exist by the textbook.  For example, the first line of <span class="variable-name">hasClass()</span>
              on page
              384 is:
            </p>
            <div class='code-block'>
Core.hasClass = function(target, theClass)
            </div>
            <p>
              But you need to change the above line to:
            </p>
            <div class='code-block'>
function hasClass(target, theClass)
            </div>
          </li>
          <li>
            <h5>Implement the <span class="variable-name">font-style</span> changes.</h5>
            <p>
              Remove the console.log() statement from the mouseover event handler.
            </p>
            <p>
              In the mouseover event handler, use the <span class="variable-name">hasClass()</span> function to see
              whether the paragraph the mouse moved over is excited or not. If it is not, add that class to it; if it
              is, remove that class from it.
            </p>
            <p>
              Test your web page, and verify that each paragraph changes to italic or back each time the mouse moves
              over it.
            </p>
          </li>
          <li>
            <h5>Implement the <span class="variable-name">color</span> changes.</h5>
            <p>
              Add more code to the mouseover handler so that each paragraph changes its emotional state based on whether
              it is currently happy, envious, or sad.
            </p>
            <p>
              Test your web page carefully to make sure the emotional and excitedness of each paragraph has been fully
              controlled by your JavaScript program.
            </p>
          </li>
        </ol>
      </div>

      <h2>Submit</h2>
      <div>
        <p>
          When you are sure your program does everything correctly, and that there are no errors are warnings from the
          XHTML and CSS validators, nor from Firebug,
          just send me an email message, and I’ll check it out in the usual way.
        </p>
        <p>
          Send your email message to me at: vickery<span class="at" title="Change to @">at</span>babbage.cs.qc.cuny.edu
          by midnight of the due date.
        </p>
        <p class="standout-block">
          The Subject line of your email message must be: “CS-90.3 Assignment 6.”
        </p>
        <p>
          Don’t forget to put your name in your email message!
        </p>
      </div>
    </div>
    <div id="footer">
      <a href="../syllabus.xhtml">Syllabus</a>
      <a href="./">Schedule</a>
      <a href="http://validator.w3.org/check?uri=referer">XHTML</a>
      <a href="http://jigsaw.w3.org/css-validator/check/referer?profile=css3">CSS</a>
      <em>Page last updated <?php echo date('Y-m-d', filemtime($_SERVER['SCRIPT_FILENAME'])); ?></em>
    </div>
  </body>
</html>

