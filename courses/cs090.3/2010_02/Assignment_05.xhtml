<?php
  header("Vary: Accept");
  if ( array_key_exists("HTTP_ACCEPT", $_SERVER) &&
       stristr($_SERVER["HTTP_ACCEPT"], "application/xhtml+xml") ||
       stristr($_SERVER["HTTP_USER_AGENT"], "W3C_Validator") )
  {
    $mime_type = "application/xhtml+xml";
    header("Content-type: $mime_type");
    print("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
  }
  else
  {
    $mime_type = "text/html";
    header("Content-type: $mime_type; charset=utf-8");
  }
 ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
                      "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>CS-90.3 Assignment 5</title>
    <link rel="shortcut-icon" href="../favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../../css/assignments.css" />
    <link rel="stylesheet" type="text/css" href="../../css/assignments-print.css" media="print" />
    <style type="text/css">
      .line-numbers {
        float:left;
        width:1em;
        background-color:#ff9;
        overflow:hidden;
      }
      .line-numbers+* {
        float:left;
        width:90%;
      }
      ol,ul {list-style-position:inside;}
    </style>
  </head>
  <body id='urn:uuid:9CE0BA21-B248-4C9E-AEE9-6328C2F9DC52'>

    <h1>CS-90.3 Assignment 5</h1>

    <div id="content">
      <h2>Overview and Preparation</h2>
      <div>
        <p>
          For this assignment, you are to implement a web page that uses JavaScript event handlers to modify the
          appearance of XHTML elements in response to user-generated events. Specifically, the assignment is to change
          the color of the text of some paragraphs as the user moves the mouse over them.
        </p>
        <p>
          Set up your index page so that it contains at least 5 paragraphs of Latin text generated by the <a
          href="http://lipsum.com">lipsum.com</a> web site. That web site explains the rationale for placing
          “placeholder” text on a web page. After you read about that, use the form in the lower right corner to pick
          the number of paragraphs you want, and then click the “Generate Lorem Ipsum” button. Select the Latin
          paragraphs from the generated web page, and paste them into your site’s <span
          class="file-name">index.xhtml</span> file, between the <span class="tag-name">h1</span> element and the <span
          class="variable-name">footer</span> <span class="tag-name">div</span> at the bottom of the page.
        </p>
        <p>
          Note that the paragraphs you paste into your document will not be actual XHTML paragraph elements; you will
          need to wrap each one in <span class="tag">p</span> and <span class="tag">/p</span> tags. In Dreamweaver, the
          keyboard shortcut to do this is to select the text in a paragraph and to type Ctrl-Shift-P.
        </p>
        <p>
          Wrap one word in the <span class="tag-name">h1</span> element and one word in the first paragraph in <span
          class="tag">span</span> and <span class="tag">/span</span>tags.
        </p>
        <p>
          Create a stylesheet named <span class="file-name">assignment_05.css</span> in your site’s <span
          class="directory-name">css</span> directory. Add a rule to this style sheet so that all span elements will use
          white text when the user moves the mouse over them. (The selector is <span
          class="code-snippet">span:hover</span>.)
        </p>
        <p>
          Check your web page:
        </p>
        <ul>
          <li>
            The paragraphs should be separated from each other rather than all run together, which would happen without
            the <span class="tag">p</span> and <span class="tag">/p</span> tags.
          </li>
          <li>
            Click the two validation links: there must be no XHTML and no CSS warnings or errors.
          </li>
          <li>
            When you hover over the two words in spans, they should disappear.
          </li>
        </ul>
      </div>
      <h2>The Assignment</h2>
      <div>
        <p>
          I am providing you with an outline for the JavaScript code for the assignment. Once you understand the
          outline, you are to extend it to implement the features listed in the Assignment Steps.
        </p>
        <p>
          Replace all links to scripts in your <span class="file-name">index.xhtml</span> page with a new link to a
          single script file named <span class="file-name">scripts/assignment_05.js</span>.  Create that file, and copy
          the following code into it:
        </p>
        <div class='code-block line-numbers'>
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
        </div>
        <div class="code-block">
window.onload = function()
{
  function mouseoverHandler(evt)
  {
    console.log('mouseover: ' + this.which_one);
  }

  var paragraphs = document.getElementsByTagName('p');
  console.log("There are " + paragraphs.length + " paragraphs.");
  for (var i = 0; i &lt; paragraphs.length; i++)
  {
    paragraphs[i].which_one = i;
    paragraphs[i].onmouseover = mouseoverHandler;
  }
};
        </div>
        <h3>Code Notes</h3>
        <ul>
          <li>
            Lines 1 and 15 mark the beginning and end of the assignment statement that creates an event handler
            for the <span class="variable-name">load</span> event that occurs when the DOM has been built, just as
            you did in Assignment 3.
          </li>
          <li>
            Lines 3-6 define a named function inside the event handler. As its name suggests, this function will
            be the event handler for mouseover events. Because it uses the form that starts with the
            <span class="keyword">function</span> keyword instead of the assignment statement form, this function
            could appear any place within the outer function definition. But it is common to put all function
            definitions at the beginning of the function that holds them.
          </li>
          <li>
            The event handler function will not be executed until the <span class="variable-name">window.onload</span>
            event occurs. At that point, line 8 calls a JavaScript built-in function that finds all the objects in the
            DOM tree for the paragraph elements of the web page; it returns these objects as the elements of an array,
            which is assigned to the variable <span class="variable-name">paragraphs</span>. Note the use of the
            keyword, <span class="keyword">var</span>: the variable <span class="variable-name">paragraphs</span>
            will be accessible only within the anonymous <span class="variable-name">window.load</span> event handler.
            If the <span class="keyword">var</span> keyword had been omitted, <span class="variable-name">paragraphs</span>
            would have been created inside the global (<span class="variable-name">window</span>) object.
          </li>
          <li>
            The <span class="function-name">console.log()</span> call on line 9 is just to let you know the code is
            working. Be sure to remove from the final version of the program: its presence will cause the page to
            stop working in Internet Explorer.
          </li>
          <li>
            You should recognize lines 10-14 as a loop that iterates over all the elements of the
            <span class="variable-name">paragraphs</span> array. Line 12 adds a property to each paragraph object to
            record which paragraph is which. This particular property is simply to demonstrate how to add your own
            properties to objects in the DOM tree; to help show you the sorts of things you can do.
          </li>
          <li>
            Line 13 is a key one: it assigns the function <span class="variable-name">mouseoverHandler</span> as the
            <span class="variable-name">onmouseover</span> event handler for each paragraph. We could have written the
            actual code for the event handler here, but it would have made the code harder to read. The function only
            needs to be defined once (lines 3-6), so it would look odd to put the definition code inside a loop.
          </li>
          <li>
            Finally, note that the body of the mouseover event listener (line 5) demonstrates how an event handler
            can access the DOM object that provides the context for calling the function by using the special
            variable named <span class="variable-name">this</span>. Every time you move the mouse over a paragraph,
            the browser calls the <span class="variable-name">mouseoverHandler</span> function and automatically
            makes <span class="variable-name">this</span> refer to the corresponding paragraph object in the DOM
            tree. So <span class="variable-name">this</span> on line 5 will always refer to one of the elements
            of the <span class="variable-name">paragraphs</span> array that was assigned values on lines 12 and 13.
          </li>
        </ul>

        <h3>Assignment Steps</h3>
        <ol>
          <li>
            <h5>Be sure the code provided to you works, and that you understand it.</h5>
            <p>
              Run the code with the JavaScript console open, and see that a “mouseover: n” message is displayed
              each time you move your mouse over a paragraph, and that the <em>n</em> in the message is a number
              that corresponds to which paragraph you moved the mouse over. Be sure the code displays another
              message every time you move your mouse over each paragraph.
            </p>
          </li>
          <li>
            <h5>Add a <span class="variable-name">mouseout</span> handler to each paragraph.</h5>
            <p>
              Use the code given to you as a model, and add another function, named <span class="">mouseoutHandler</span>,
              to the project. Have it display a message that says “mouseout: n” like the one the mouseover listener
              displays. Add the line of code to the loop that set up this function as the
              <span class="variable-name">onmouseout</span> event handler for each paragraph.
            </p>
            <p>
              Test the code, and make sure moving the mouse over a paragraph causes one message to be displayed and that
              moving the mouse away from the paragraph causes the complementary message to be displayed. Be sure you get
              the proper sequence of messages no matter which paragraph you move the mouse over and no matter how many
              times you move over different paragraphs.
            </p>
          </li>
          <li>
            <h5>
              Change the text color to red when the mouse moves over a paragraph, and back to black when the mouse moves
              away from the paragraph.
            </h5>
            <p>
              Here is the line of code you need to add to the mouseover event handler to make the text turn red:
            </p>
            <div class="code-block">
  this.style.color = 'rgb(255, 0, 0)';
            </div>
            <p>
              You could use any CSS representation of the color for the string ('red', #F00, etc); the representation
              given here is what browsers use internally.
            </p>
            <p>
              Use similar code in the mouseout handler to make the text color turn back to black
              (<span class="code-snippet">rgb(0, 0, 0)</span>) when the mouse moves away from it.
            </p>
            <p>
              Check your code to make sure the text color changes to red whenever you move the mouse over it, and back to
              black when you move the mouse away from it.
            </p>
            <p  class="standout-block">
              Note that all this JavaScript code does exactly the same thing you could have accomplished with a single
              CSS rule: <span class="code-snippet">p:hover { color: red; }</span>. If this was all you wanted to
              accomplish, there would be no reason to use JavaScript!
            </p>
          </li>
          <li>
            <h5>Modfy the page so each paragraph cycles through three colors.</h5>
            <p>
              The first time the user moves the mouse over a paragraph, it turns red. The next time, it turns green;
              the next time, it turns blue; the next time, it turns red again; etc.
            </p>
            <p>
              If you were to remove the code that turns each paragraph black when the mouse leaves it, you could see
              what the current color is when the mouse enters the paragraph, and change the color to the next one. But
              having the the paragraphs turn black when the mouse leaves them means the current color will always be
              black when the mouse enters them again. The solution is to add your own property to each paragraph, where
              you would keep track of the last non-black color applied to it.
            </p>
            <p>
              First look at the logic your mouseover handler could use. In computer science, the logical steps a program
              follows are called, its <span title="the steps to follow to solve a problem"
              class="tech-term">algorithm</span>. Here is the algorithm using English phrases in place of some of the
              actual JavaScript code, a form called “pseudocode:”
            </p>
            <div class="code-block">
  if (the last color was red)
  {
    set the color to green
  }
  else if (the last color was green)
  {
    set the color to blue
  }
  else
  {
    set the color to red
  }
            </div>
            <p>
              You are to turn this pseudocode into valid JavaScript. Since you are to restore each paragraph to
              black when the mouse exits, you will have to use your own property to record what the last color was
              (instead of using this.style.color to find out what the current color is). The sample code is an example of
              adding your own property (<span class="variable-name">which_one</span>) to paragraphs. In this case, you
              can use simple strings, like 'red', 'green', and 'blue' for your property values. You could even use
              simple letters ('r', 'g', 'b') or even arbitrary numbers (1, 2, 3) to represent the previous color. Every
              time you set the color of a paragraph, record which color it is in your personal property for the
              paragraph.
            </p>
            <p>
            	In class, I showed how to use a JavaScript <span class="keyword">switch</span> statement intead of a
              lot of <span class="keyword">if</span> and <span class="keyword">else if</span> keywords to keep track
              of the last color a paragraph was. You may use that code for this assignment, or you can use a more
              complicated (but easier to understand) <span class="keyword">if else</span> structure if you prefer.
            </p>
            <div class="standout-block">
            	Note that the <span class="variable-name">which_one</span> property name is not appropriate for the
              actual code in this assignment. It was used above only to demonstrate how you can add your own property
              to a DOM object. For the assignment, you should use a more meaningful property name, like
              <span class="variable-name">last_color</span> that I used in my code in class.
            </div>
          </li>
        </ol>
      </div>

      <h2>Submit</h2>
      <div>
        <p>
          There are no questions to answer for this assignment. When you are sure your program does everything correctly,
          just send me an email message, and I’ll check it out in the usual way.
        </p>
        <p>
          Send your email message to me at: vickery<span class="at" title="Change to @">at</span>babbage.cs.qc.cuny.edu
          by midnight of the due date.
        </p>
        <p class="standout-block">
          The Subject line of your email message must be: “CS-90.3 Assignment 5.”
        </p>
        <p>
          Don’t forget to put your name in your email message!
        </p>
      </div>
    </div>
    <div id="footer">
      <a href="../syllabus.xhtml">Syllabus</a>
      <a href="./">Schedule</a>
      <a href="http://validator.w3.org/check?uri=referer">XHTML</a>
      <a href="http://jigsaw.w3.org/css-validator/check/referer?profile=css3">CSS</a>
      <em>Page last updated <?php echo date('Y-m-d', filemtime($_SERVER['SCRIPT_FILENAME'])); ?></em>
    </div>
  </body>
</html>

