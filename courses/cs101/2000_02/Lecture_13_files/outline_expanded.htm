<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">

<script>
<!--
if( window.name != "PPTOtl" )
  parent.location.href = "../Lecture_13.html";
//-->
</script>
<meta name=Robots content=NoIndex>
</head>

<body>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0001.htm');">Lecture 13</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>March 21, 2000</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0002.htm');">Slide 2</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0003.htm');">Polymorphism Experiments</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Basic Code: Method C is polymorphic.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Which methodC() you get depends on the
  type of object you use to access it.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Can you use subRef to get to a
  SuperClass method? Answer: yes.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Can you use superRef to access a
  SubClass method? Answer: no.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Can you use superRef with a SubClass
  object?</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>If you use a cast to fool the compiler,
  the problem will be detected at run time: ClassCastException.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0004.htm');">Interfaces</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>A class may extend only one superclass.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Single Inheritance</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>But a Java class may implement any
  number of interfaces.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Java’s solution to the multiple
  inheritance issue.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>A class that implements an interface
  must implement (define) all the methods declared in the interface.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>[ Interface_ex.java ]</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0005.htm');">java.util.Iterator</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=4><font face=Arial size=2>Declares three methods:</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=3><font face=Arial size=2>boolean hasNext()</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=3><font face=Arial size=2>Object next()</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=3><font face=Arial size=2>void remove()</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=4><font face=Arial size=2>[ Class MyReader implements Iterator ]</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=3><font face=Arial size=2>[ TestMyReader.java ]</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=4><font face=Arial size=2>Class Vector has this method:</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=3><font face=Arial size=2>Iterator iterator()</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=2><font face=Arial size=2>What does it return?</font></td>
 </tr>
 <tr>
  <td colspan=4></td>
  <td colspan=1><font face=Arial size=2>A reference to an object that is an
  instance of a class that implements the Iterator interface.</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=2><font face=Arial size=2>What can you do with the object it
  returns?</font></td>
 </tr>
 <tr>
  <td colspan=4></td>
  <td colspan=1><font face=Arial size=2>Use it to call hasNext(), next(), and
  remove().</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0006.htm');">Abstract Methods and Classes</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>An abstract method is one that is
  declared but not implemented.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Methods declared in interfaces are
  abstract.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>You can declare any method to be
  abstract.</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>This makes the class containing the
  method abstract.</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>Abstract classes cannot be
  instantiated.</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>Used when writing a superclass that
  includes some method definitions and declares others that have to be
  implemented by subclasses.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0009.htm');">Final Methods</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>If a method is declared final it cannot
  be overridden in a subclass.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>public final myMethod( int x ) { … }</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>There can be a big speed advantage in
  calling static methods because the compiler doesn’t have to follow as many
  pointers to find the method.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0007.htm');">Abstract Data Types</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Not a Java term.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Used before object oriented
  programming.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Encapsulation of data and operators for
  user-defined types.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>What is the Java facility for creating
  Abstract Data Types?<span style="mso-spacerun: yes">  </span>Answer : classes</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0008.htm');"><span style="mso-spacerun:
yes"> </span>[Summary Chart ]</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Click on the link above to get to a
  chart that summarizes the characteristics of:</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Classes</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Abstract classes</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Interfaces</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Hint:<span style="mso-spacerun: yes"> 
  </span>There are a lot of potential exam questions asked and answered in the
  chart!</font></td>
 </tr>
</table>

</p>

</body>

</html>
