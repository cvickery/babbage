<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">

<script>
<!--
if( window.name != "PPTOtl" )
  parent.location.href = "../CS-101_Lecture_05.htm";
//-->
</script>
<meta name=Robots content=NoIndex>
</head>

<body bgcolor=black text=white link=white vlink=white alink=white>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0001.htm');">CS-101 Lecture 5</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>September 13, 2001</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0004.htm');">Administrivia</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>There is a web page for downloading and
  setting up vim, linked from the course schedule.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Submit Assignment 2 when you can, but
  no later than next Thursday.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0007.htm');">Static and Non-Static</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>“static” may modify both methods and
  fields</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Within a single class:</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Statements inside static methods can
  reference only static fields, static methods, local variables, and parameters</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Statements inside non-static methods
  can reference both static and non-static fields and methods, as well as local
  variables and parameters.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>“Similarly” across classes</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0008.htm');">Sample Code</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>df_1, df_2, and i have lifetimes from the moment the method is
  entered to the moment it returns.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>The scope of df_1 is the entire method;
  the scope of df_2 and i is only inside the loop (“block local”)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>When the assignment to df_2 is executed
  the second time through the loop there will be no more references to the
  first object created, and it will no longer be “alive.” Its memory can be
  reused.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>After the loop finishes and before the
  method returns, 1,000 objects will have been created, but only the last one
  will still be alive, with a single reference to it from df_1.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0009.htm');">Constructors</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Look like methods, but have no return
  type.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>If you put a return type on a
  “constructor” the compiler won’t say anything is wrong; it will just create a
  method with the same name as the class.<span style="mso-spacerun: yes"> 
  </span>Don’t do that!</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Like overloaded methods, there can be
  multiple constructors for a class, each with its own distinguishing set of
  parameters.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0010.htm');">Getting from References to
Objects to Classes</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Every object’s memory includes a
  pointer to the class information in the method region of memory.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Instance methods are located from an
  object reference by following that pointer.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Instance methods are passed an extra,
  hidden, parameter that is a copy of the reference variable used to access the
  method.<span style="mso-spacerun: yes">  </span>Inside the method, that
  pointer can be accessed using the variable name “this”.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>The compiler automatically accesses the
  instance variables referenced in a non-static method by using the this
  pointer to locate the object in memory.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0011.htm');">Slide 7</a></b></font></p>

</body>

</html>
