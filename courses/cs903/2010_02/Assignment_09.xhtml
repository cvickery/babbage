<?php
  header("Vary: Accept");
  if ( array_key_exists("HTTP_ACCEPT", $_SERVER) &&
       stristr($_SERVER["HTTP_ACCEPT"], "application/xhtml+xml") ||
       stristr($_SERVER["HTTP_USER_AGENT"], "W3C_Validator") )
  {
    $mime_type = "application/xhtml+xml";
    header("Content-type: $mime_type");
    print("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
  }
  else
  {
    $mime_type = "text/html";
    header("Content-type: $mime_type; charset=utf-8");
  }
 ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
                      "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>CS-90.3 Assignment 9</title>
    <link rel="shortcut-icon" href="../favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../../css/assignments.css" />
    <link rel="stylesheet" type="text/css" href="../../css/assignments-print.css" media="print" />
  </head>
  <body id='urn:uuid:F201E1D4-F59C-440C-B3C9-3F7365CD1523'>

    <h1>CS-90.3 Assignment 9</h1>

    <div id="content">
      <h2>Requirement</h2>
      <div>
        <p>
        	Add functionality to Assignment 8 so that the response to submitting the form is one of three messages:
        </p>
        <ul>
        	<li>User, _____, not found.</li>
          <li>User, _____, found, but your password, _____, is incorrect. It should be _____.</li>
          <li>Welcome, _____, thank you for logging in!</li>
        </ul>
      </div>
     	<h2>The Assignment</h2>
      <div>
        <ol>
          <li>
          	<h5>Prepare your database.</h5>
            <p>
             	Use a spreadsheet program such as <span class="program-name">OpenOffice Calc</span>, 
              <span class="program-name">Microsoft Excel</span>, or <span class="program-name">Apple Numbers</span>
              to create a table with two columns. Put a list of email addresses in the first column, and a
              set of corresponding passwords in the second column. You may use real email addresses, but be sure
            	the passwords are all fictional! Include 4-5 rows in your table.
            </p>
            <p>
            	Create a directory named <span class="file-name">db</span> in your web site, and save your spreadsheet 
              there as a CSV (comma separated values) document.
            </p>
          </li>
          <li>
          	<h5>Use PHP to display your database.</h5>
            <p>
            	Use the PHP <span class="variable-name">fopen()</span> function to open your database file, and then
              use a <span class="keyword">while</span> loop to read each line in the file using the
              <span class="variable-name">fgetcsv()</span> function, generating a table row in your web page for
              each line in the file.
            </p>
           	<ul>
            	<li>
              	Open the file. Save the value returned by <span class="variable-name">fopen()</span> in a
                meaningfully-named variable, such as <span class="variable-name">$user_database_connection</span>.
                I am purposely using a long variable name as an example to encourage you to think of a name that
                would be equally meaningful but easier to type!
              </li>
              <li>
              	Here is how to read lines from a file until they all have been read:
                <div class="code-block">
  while ($row = fgetcsv($user_database_connection))
  {
  	// Process each line from the file here
  }
                </div>
                <p>
                	Your job is to replace the comment line in the above sample code with PHP statements that will echo
                  a table row with two cells in it, which you are to fill with the values of 
                  <span class="variable-name">$row[0]</span> and <span class="variable-name">$row[1]</span>.
                </p>
                <p>
                	Be sure your page generate the proper start tag for the <span class="tag-name">table</span>
                  before the loop, and the proper end tag after the end of it. There should also be a header row
                  before the first data row.
                </p>
                <p>
                	Use CSS to style the table so it is easy to read.
                </p>
              </li>
            </ul>
          </li>
          <li>
            <h5>Implement the Assignment.</h5>
            <p>
              Now that you have established that you can process the information in the database file, use
              <span class="keyword">if</span>, <span class="keyword">else if</span>, and 
              <span class="keyword">else</span> to implement the following algorithm:
            </p>
            <ul>
              <li>
                Set a variable (conventionally named, <span class="variable-name">$found</span>) to 
                <span class="variable-name">false</span>.
              </li>
              <li>
                Reset the database file to the beginning. After going through the loop that generates the
                <span class="tag-name">table</span> of database contents, you can reposition the file so
                you can read it all over again by using the <span class="variable-name">fseek()</span>
                function like this:
                <span class="code-snippet">fseek($user_database_connection, 0);</span>
              </li>
              <li>
                Loop through the lines in the database file, comparing the first element to the value of the
                username from the form. If there is a match:
                <ul>
                  <li>
                    Set <span class="variable-name">$found</span> to true.
                  </li>
                  <li>
                    If the password value from the form matches the second element from the database row,
                    generate the third message (“Welcome&hellip; ”), and use a <span class="keyword">break</span>
                    statement to exit from the loop. Fill in the blank with the user’s name.
                    <p>
                    	<strong>Optional: </strong> You can use the <span class="keyword">===</span> operator to
                      compare strings for equality, but this is a case-sensitive comparison. If you want to let
                      the user name be case-insensitive, the easiest way is to use PHP’s 
                      <span class="variable-name">strcasecmp()</span> function, which returns the value 0 if two
                      strings passed as arguments are equal, ignoring upper/lower case differences. Do not use this
                      function for checking passwords!
                    </p>
                  </li>
                  <li>
                    If the password value does not match the second element from the database row,
                    generate the second message listed above. Again, use a <span class="keyword">break</span>
                    statment to exit the loop. Fill in the first blank with the name of the user submitted from
                    the form, the second blank with the password submitted from the form, and the third blank with
                    the value of the second value in the row from the database.
                  </li>
                </ul>
              </li>
              <li>
                After the end of the loop, test the value of <span class="variable-name">$found</span>: if it
                is not true, echo the first message above. Fill in the blank with the user name submitted from
                the form.
              </li>
            </ul>
          </li>
          <li>
            <h5>Use CSS to make everything beautiful!</h5>
          </li>
        </ol>
      </div>

      <h2>Submit</h2>
      <div>
        <p>
          When you are sure your program does everything correctly, and that there are no errors are warnings from the
          XHTML and CSS validators, nor from Firebug,
          just send me an email message, and I’ll check it out in the usual way.
        </p>
        <p>
          Send your email message to me at: vickery<span class="at" title="Change to @">at</span>babbage.cs.qc.cuny.edu
          by midnight of the due date.
        </p>
        <p class="standout-block">
          The Subject line of your email message must be: “CS-90.3 Assignment 9.”
        </p>
        <p>
          Don’t forget to put your name in your email message!
        </p>
      </div>
    </div>
    <div id="footer">
      <a href="../syllabus.xhtml">Syllabus</a>
      <a href="./">Schedule</a>
      <a href="http://validator.w3.org/check?uri=referer">XHTML</a>
      <a href="http://jigsaw.w3.org/css-validator/check/referer?profile=css3">CSS</a>
      <em>Page last updated <?php echo date('Y-m-d', filemtime($_SERVER['SCRIPT_FILENAME'])); ?></em>
    </div>
  </body>
</html>

