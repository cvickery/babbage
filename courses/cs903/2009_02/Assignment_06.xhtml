<?php
  header("Vary: Accept");
  if (  array_key_exists("HTTP_ACCEPT", $_SERVER) &&
        stristr($_SERVER["HTTP_ACCEPT"], "application/xhtml+xml") ||
        stristr($_SERVER["HTTP_USER_AGENT"], "W3C_Validator")
      )
  {
    header("Content-type: application/xhtml+xml");
    header("Last-Modified: "
                    .gmdate('r',filemtime($_SERVER['SCRIPT_FILENAME'])));
    print("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
  }
  else
  {
    header("Content-type: text/html; charset=utf-8");
  }
 ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

  <head>

    <title>CS-90.3 Assignment 6</title>

    <link rel="shortcut icon" href="../favicon.ico" />
    <link rel="stylesheet"
          type="text/css"
          media="all"
          href="../../css/style-all.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="screen"
          href="../../css/style-screen.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="print"
          href="../../css/style-print.css"
    />
    <link rel="stylesheet" type="text/css" media="all"
          href="../../css/assignments.css" />
  </head>

  <body>
    <div id="header">
      <h1>CS-90. Assignment 6<br />Spring 2009</h1>
    </div>
    <div id="content">
      <h2>Introduction</h2>
      <div>
        <h3>Error Management</h3>
        <div>
          <p>
            To control PHP’s error message display, you can use either the function <span class="function-name">error_reporting()</span>
            or <span class="function-name">ini_set()</span>. The latter takes two argument strings, the name of the option to change
            (<span class="code-snippet">error_reporting</span>) and a numerical string that tells what level of error reporting you want
            (such as <span class="code-snippet">'0'</span> to turn error reporting off). The advantage of using
            <span class="function-name">error_reporting()</span> is that it takes just one argument, and you can use the symbolic
            constants, such as <span class="code-snippet">E_ALL</span> to get all errors displayed instead of having to look up what
            numerical value to use (which changes from version to version of PHP). But you still have to use the number 0 instead of a
            symbolic constant to turn error reporting off.
          </p>
          <p class="code-block">
  error_reporting(0); // Now PHP will not display error messages.
    &hellip; // code where the program checks for errors by itself.
  error_reporting( E_ALL ); // Now PHP displays errors if they occur.
          </p>
          <p>
            A predefiend variable that can be used for generating error messages is <span class="variable-name">$php_errormsg</span>:
          </p>
          <p class="standout-block">
            $php_errormsg is a variable containing the text of the last error message generated by PHP. This variable will only be 
            available within the scope in which the error occurred, and only if the <span class="variable-name">track_errors</span> 
            configuration option is turned on (it defaults to off). 
          </p>
          <p>
            You can use <span class="function-name">ini_set()</span> to turn on <span class="variable-name">track_errors</span>:
          </p>
          <p class='code-block'>
  ini_set('track_errors', 'On');
          </p>
          <p>
            Finally, there is a function named <span class="function-name">pg_last_error()</span> that you can use to get a string
            that tells you the most recent database SQL problem. This function works only after you have successfully gotten a
            &ldquo;connection resource&rdquo; to pass to it by calling <span class="function-name">pg_connect()</span>. If there
            have been no SQL problems, this function returns an empty string.
          </p>
        </div>
      </div>
      <h2>The Assignment</h2>
      <div>
      	<p>
        	Create a table named <span class="variable-name">users</span> in your database, and add columns for 
          <span class="variable-name">id</span> (primary key), <span class="variable-name">last_name</span>,
          <span class="variable-name">first_name</span>, <span class="variable-name">email</span>, 
          <span class="variable-name">password</span>, and <span class="variable-name">is_registered</span>, as demonstrated in class.
        </p>
        <p>
        	Populate your table with three users: you, me, and someone else. You and I should be &ldquo;registered,&rdquo; but the other user
          should not be.
        </p>
        <p>
        	Alter the form on your site’s home page so the user can log in by supplying their email address and password. That is, the text
          on the submit button should be &ldquo;Login&rdquo;.
        </p>
        <p>
        	When the user submits the form, still validate the email address and password as before, but
        	  alter 
          <span class="file-name">login.php</span> so that it displays a greeting to the user if the
          password and email address match an entry in the database. The greeting message is to use the
          person’s full name and is to include a statement saying whether the person has registered yet
          or not. If the email address is in the database but the password is wrong, display a message
          saying that the email/password combination is not recognized. If the email address is not in
          the database, issue a message saying so. (Note that in a real system you would not want to
          differentiate between the latter two cases because it gives hackers too much information.)
        </p>
        <p>
        	Store passwords in the database in plain text form. Do not do anything about 
          <a href="http://xkcd.com/327/" title="Little Bobby Tables">SQL injection</a> yet.
        </p>
			</div>

      <h2>Submit The Assignment</h2>
      <div>
        <p>
          When your assignment is working, log out and be sure your profile is copied back to the server. Send me an
          email message telling me that you have completed the assignment, and I will get a copy of it from your account
          on Oak for testing. If your roaming profile does not work, mention that in your email, and I will copy your
          <span class="directoryName">My Website</span> directory from your home directory instead of your profile
          directory on Oak.
        </p>
        <ol>
            <li>Be sure to put your name in your email message!</li>
            <li>
              The Subject line must be <span class="code-snippet">CS-90.3 Assignment 6</span> to avoid my spam filters.
            </li>
            <li>
              Send your email to either Christopher.Vickery<span class="at" title="Change to @">AT</span>qc.cuny.edu or
              vickery<span class="at" title="Change to @">AT</span>babbage.cs.qc.cuny.edu &mdash; but not to both.
            </li>
            <li>
              See <a href="../syllabus.xhtml">the course syllabus</a> for grading and late homework policies.
            </li>
        </ol>
      </div>
    </div>
    <div id="footer">
      <a href="../../../">Vickery Home</a> &mdash; <a href="../../cs090.3">CS-90.3 Home</a> &mdash;
      <a href="http://validator.w3.org/check?uri=referer">XHTML</a> &mdash;
      <a href="http://jigsaw.w3.org/css-validator/check/referer">CSS</a> &mdash;
      Last updated <?php echo date("Y-m-d", filemtime($_SERVER['SCRIPT_FILENAME'])); ?>
    </div>
  </body>
</html>

