<?php
  header("Vary: Accept");
  if (  array_key_exists("HTTP_ACCEPT", $_SERVER) &&
        stristr($_SERVER["HTTP_ACCEPT"], "application/xhtml+xml") ||
        stristr($_SERVER["HTTP_USER_AGENT"], "W3C_Validator")
      )
  {
    header("Content-type: application/xhtml+xml");
    header("Last-Modified: "
                    .gmdate('r',filemtime($_SERVER['SCRIPT_FILENAME'])));
    print("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
  }
  else
  {
    header("Content-type: text/html; charset=utf-8");
  }
 ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

  <head>

    <title>CSCI 903 Assignment 7</title>
    <link rel="shortcut icon" href="../../cs903/favicon.ico" />
    <link rel="stylesheet"
          type="text/css"
          media="all"
          href="../../css/style-all.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="screen"
          href="../../css/style-screen.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="print"
          href="../../css/style-print.css"
    />        
    <link rel="stylesheet"
          type="text/css"
          media="all"
          href="../../css/assignments.css"
    />
    <style type="text/css">
      ul li {padding:0.2em;}
    </style>
  </head>
  <body>
  <h1>CSCI-903 Assignment 7</h1>
    <h2>Assigned Videos</h2>
    <ul>
      <li>
        <a href="http://www.youtube.com/watch?v=wamwklXWK4M">Hackerspaces (5 minutes)</a>
      </li>
      <li>
        <a href="http://www.ted.com/talks/kevin_slavin_how_algorithms_shape_our_world.html">
        Algorithms (15 minutes)</a>
      </li>
    </ul>
    <h2>Reading</h2>
    <div>
      You should have finished reading at least through Chapter 7 of the Gleick book by now.
      For Tuesday, the question is, “how can you measure the randomness of a sequence of events?”
    </div>
    <h2>Coding Assignment</h2>
    <div>
      <p>
        Program your Teagueduino board so the five outputs will display all combinations of 5-bits,
        in binary counting order. A button or switch (not an analog input) connected to input #1 is
        to cause the outputs to advance to the next step in the sequence each time it is pressed. After
        the sequence reaches 11111<sub>2</sub>, the sequence is to go back to 00000<sub>2</sub> again.
      </p>
      <p>
        To avoid extra steps when the input is operated due to contact bounce, insert a 20 msec delay
        after each <em>waituntil()</em> step.
      </p>
      <h3>Algorithm</h3>
      <div>
        <p>
          Use five variables to hold the current value of each of the five bits. Set each of these
          variables to zero during the setup phase.
        </p>
        <p>
          During the loop phase, repeat the following steps:
        </p>
        <ol>
          <li>Output the values of the five variables to the five Teagueduino outputs.</li>
          <li>Wait for the button to be pressed</li>
          <li>
            Use a nested set of <code>if</code> statements to set the values of the five variables to
            the next state value.
            <p><em>Each bit changes state (from 1 => 0 or from 0 => 1) when all the bits to the right of
            it are ones. The rightmost bit changes state every time. Hint: a variable <em>x</em> that
            has a value of either 0 or 1 changes to the opposite value if you assign the value
            <code>1&#x00a0;-&#x00a0;x</code> to it.
            </em></p>
          </li>
        </ol>
        <p>
          <em>Note:</em> To make sure your counter goes just one step per button press, the code has to
          detect button releases too!
        </p>
      </div>
    </div>
    <div id="footer">
      <a href="http://validator.w3.org/check?uri=referer">XHTML</a>&mdash;<a
         href="http://jigsaw.w3.org/css-validator/check/referer?profile=css3">CSS</a>
    </div>
  </body>
</html>
