<?php
  header("Vary: Accept");
  if (  array_key_exists("HTTP_ACCEPT", $_SERVER) &&
        stristr($_SERVER["HTTP_ACCEPT"], "application/xhtml+xml") ||
        stristr($_SERVER["HTTP_USER_AGENT"], "W3C_Validator")
      )
  {
    header("Content-type: application/xhtml+xml");
    header("Last-Modified: "
                    .gmdate('r',filemtime($_SERVER['SCRIPT_FILENAME'])));
    print("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
  }
  else
  {
    header("Content-type: text/html; charset=utf-8");
  }
 ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

  <head>

    <title>CSCI 903 Assignment 10</title>
    <link rel="shortcut icon" href="../../cs903/favicon.ico" />
    <link rel="stylesheet"
          type="text/css"
          media="all"
          href="../../css/style-all.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="screen"
          href="../../css/style-screen.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="print"
          href="../../css/style-print.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="all"
          href="../../css/assignments.css"
    />
    <style type="text/css">
      ul li {padding:0.2em;}
			td {text-align:right;padding-right:3em;}
    </style>
  </head>
  <body>
  <h1>CSCI-903 Assignment 10</h1>
    <h2>Assignment</h2>
    <div>
      <p>
        Program your Teagueduino to control two servo motors, connected to two wheels or pulleys,
        so that three switches will control the robot’s movements. You can make up your own input
        codes, but these are the ones we used in class:
      </p>
      <table>
        <tr>
          <th>In_1</th>
          <th>In_2</th>
          <th>In_3</th>
          <th><em>function</em></th>
          <th>Out_A (Left Wheel)</th>
          <th>Out_B (Right Wheel)</th>
        </tr>
        <tr>
          <th>0</th>
          <th>0</th>
          <th>0</th>
          <th>Stop</th>
          <td>Neutral</td>
          <td>Neutral</td>
        </tr>
        <tr>
          <th>0</th>
          <th>0</th>
          <th>1</th>
          <th>Turn Right</th>
          <td>CCW</td>
          <td>Neutral</td>
        </tr>
        <tr>
          <th>0</th>
          <th>1</th>
          <th>0</th>
          <th>Forward</th>
          <td>CCW</td>
          <td>CW</td>
        </tr>
        <tr>
          <th>0</th>
          <th>1</th>
          <th>1</th>
          <th></th>
          <td></td>
          <td></td>
        </tr>
        <tr>
          <th>1</th>
          <th>0</th>
          <th>0</th>
          <th>Turn Left</th>
          <td>Neutral</td>
          <td>CW</td>
        </tr>
        <tr>
          <th>1</th>
          <th>0</th>
          <th>1</th>
          <th>Backwards</th>
          <td>CW</td>
          <td>CCW</td>
        </tr>
        <tr>
          <th>1</th>
          <th>1</th>
          <th>0</th>
          <th></th>
          <td></td>
          <td></td>
        </tr>
        <tr>
          <th>1</th>
          <th>1</th>
          <th>1</th>
          <th></th>
          <td></td>
          <td></td>
        </tr>
      </table>
			<p>
			  The output values are listed as “CW” for “clockwise,” “CCW” for “counterclockwise,” and
				“Neutral” for “no motion.” The table gives the motor directions as you face the motors from
				the outside, looking in. You may need to experiment to determine whether CW is produced by
				an output value of 0 and CCW by an output value of 1000, or <em>vice-versa</em>. Also, the
				output value that makes a motor stop moving, (“Neutral” in the table) varies from one servo
				motor to another. In class we handled this situation by using two variables to hold the
				neutral values for the two motors, which should be determined by experiment, and then
				assigned to the two variables during the setup phase of the code.
 			</p>
			<p>
			  A simple solution to coding the controller would be to code five triply-nested 
				<code>if</code> statements, one for each <em>function</em>, requiring 8 lines of code
				for each function, a total of 40 lines. But the code can be written more efficiently
				by observing that the same tests are repeated unnecessarily using this approach. For
				example, once the code determines that both In_1 and In_2 are false, it can set Out_B to
				Neutral, and then use <code>if-else</code> to decide whether Out_A needs to be set to
				Neutral or CCW.
			</p>
			<p>
			  An optional coding challenge is to incorporate two additional functions, “Pivot Right” and
				“Pivot Left.” For example, if both motors go CW, the robot will pivot to the left as the
				right side goes forward and the left side goes backwards. From a human factors perspective,
				input codes of 011 for pivot right and 110 for pivot left seem to make sense.
			</p>
			<p>
			  Then, if you have seven of the eight input possibilities accounted for, it would make sense
				to do something “intelligent” for the eighth input combination. What should it be?
			</p>
    </div>
    <div id="footer">
      <a href="http://validator.w3.org/check?uri=referer">XHTML</a>&mdash;<a
         href="http://jigsaw.w3.org/css-validator/check/referer?profile=css3">CSS</a>&mdash;<a
         href=".">Course Schedule</a>
    </div>
  </body>
</html>
