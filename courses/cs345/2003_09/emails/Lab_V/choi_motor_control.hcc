/* motor_control.hcc
 *
 * Author: Sora Choi
 *
 * This program generate a pulse every 20 msec.
 * If one pushbutton is pressed, the pulse is to be 1.0msec long;
 * if the other button is pressed, the pulse is to be 2.0 msec long.
 * If neither (or both) button is pressed, the pulse is is to be 
 * 1.5 msec long. When Futaba model number 3003 is connected, 
 * rotates clockwise when it receives 1.0 msec pulses, counterclockwise 
 * when it receives 2.0 msec pulses, and not at all when it receives 
 * 1.5 msec pulses.
 * 
 */
#ifdef USE_SIM
#define PAL_ACTUAL_CLOCK_RATE 1000000
set clock =external "P1"
  with
  {
   extlib = "DKSync.dll",
   extinst ="1000",
   extfunc ="DKSyncGetSet"
   };
#define SW0 8
#define SW1 9
#define NUM_SWITCHES 10
#else
#define PAL_TARGET_CLOCK_RATE 50000000
#define SW0 0
#define SW1 1
#define NUM_SWITCHES 2
#endif

#include "pal_master.hch"
#include "stdlib.hch"

unsigned 1 motor_pin = 0;

interface bus_out() motor(unsigned 1 out = motor_pin)
  with {
#ifdef USE_SIM
  extlib ="DKConnect.dll",
  extinst ="t(1)",
  extfunc ="DKConnectGetSet"
#else 
  data = {"M2"}
#endif
 };

static macro proc microsec_delay(microsec);
chan unsigned 1 MotorData; // 

void main ( void )
{
  unsigned 1 val;
  while(1)
  {
    MotorData ! val;

    microsec_delay(20000);
  } 
 
}

void main ( void )
{
  static unsigned 1 x;
  unsigned 1 prev_sw0;
  unsigned 1 prev_sw1;
  unsigned 1 sw0;
  unsigned 1 sw1;

  PalVersionRequire(1,2);
  PalSwitchRequire (2);

  while(1)
  {
    delay;
    MotorData ? x;

    par
    {
    
        PalSwitchRead(PalSwitchCT (SW0), &sw0);
        PalSwitchRead(PalSwitchCT (SW1), &sw1);      
    }

    motor_pin=1;
    
    if(sw0==1)
    { 
      if( sw1 == 0)          // 0 1  -> 1000 msec
       microsec_delay(1000);
      
      else                   // 1 1  -> 1500 msec
       microsec_delay(1500);
       
    }
    else 
      if(sw1 == 1)           // 1 0  -> 2000 msec
      {
        microsec_delay(2000);
      }
      else                   // 0 0  -> 1500 msec
        microsec_delay(1500); 
 
      motor_pin=0;

  }
}
static macro proc microsec_delay(microsec)
{
#ifdef USE_SIM
  macro expr cycles=(PAL_ACTUAL_CLOCK_RATE * microsec)/1000000;
#else
  macro expr cycles=(PAL_TARGET_CLOCK_RATE * microsec)/1000000;
#endif

  unsigned (log2ceil(cycles)) count;
  
  count=cycles-4;

  while( count != 0) 
  {
    count--;
  }
  
}  
