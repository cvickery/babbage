/***************************************************************
 * Laboratory IV                                               *
 * Patrick Yu                                                  *
 * laboratory_iv.hcc                                           *
 * Program will display two hex digit on the seven segment     *
 * display and on the LCD display.                             *
 ***************************************************************/

 // Clock rate specified for LCD.
 #define PAL_TARGET_CLOCK_RATE 25175000

/*
 * Header files, with descriptions, are found in:
 * C:\Program Files\Celoxica\PDK\Hardware\Include 
 */
 #include "pal_master.hch"
 #include "stdlib.hch"
 // Generic keyboard driver library using the PAL API.
 #include "pal_keyboard.hch"
 // Header for implementation of PAL for Celoxica RC200.
 #include "pal_rc200.hch"
 // Header for Celoxica RC200 board interface. 
 #include "rc200.hch"

/*
 * Forward declarations
 */
 static macro expr ClockRate = PAL_ACTUAL_CLOCK_RATE;
 static macro proc RunTest (keyboardPtr);
 static macro proc Segment1A ();
 static macro proc Segment1B ();
 static macro proc Segment1C ();
 static macro proc Segment1D ();
 static macro proc Segment1E ();
 static macro proc Segment1F ();
 static macro proc Segment1G ();
 static macro proc Segment2A ();
 static macro proc Segment2B ();
 static macro proc Segment2C ();
 static macro proc Segment2D ();
 static macro proc Segment2E ();
 static macro proc Segment2F ();
 static macro proc Segment2G ();
 
/*
 * Set the color for my number and background.
 * Color can be 24 or 30 bits. Specifications 
 * can be found in rc200.hch, under macro RC200VideoOutWrite24 ().  
 */
 unsigned 24 colour = 0x00ff00;
 unsigned 24 background = 0x0000ff;
	
		
/*
 * Main program
 */
 void main (void)
 {
	// Pointer to PalKeyboard.
	PalKeyboard *keyboardPtr;

   /***********************************************
	* Check we've got everything we need.         *	                  
	* PalPS2PortRequire Check we have 2 resources *
	* of type PS2 Port available at compile time. *
	* PS2 Port used to connect to keyboard.       *
	***********************************************/
	PalVersionRequire (1, 0);
	PalPS2PortRequire (2);
	PalSevenSegRequire (1);
	

	PalSevenSegEnable (PalSevenSegCT (0));
	PalSevenSegEnable (PalSevenSegCT (1));

	par
	{	
		/*************************************************************
		 * Macros PalKeyboardRun (), PalKeyboardEnable (),           * 
		 * and PalKeyboardReadASCII () are found in pal_keyboard.hch.*
		 * PAL API states that Run/Enable/Disable/Read/Write must    *
		 * run in parallel. PalPS2PortCT (1) is a PS2port handle     *
		 * we are passing into PalKeyboardRun ().                    *
		 *************************************************************/
		PalKeyboardRun (&keyboardPtr, PalPS2PortCT (1), ClockRate);
		
	   /*
	    * Drive the output video into the LCD. Macro found in
		* rc200.hch. Argument Mode & ClockRate. Mode also stated in rc200.hch
		*/ 
		RC200VideoOutRun (RC200LCDOutMode480at60, ClockRate);

		seq
		{
			PalKeyboardEnable (keyboardPtr);
			RC200VideoOutEnable ();
			RunTest (keyboardPtr);
		}// end seq
	}// end par

 }// end main

/***********************************************************************
 * Macro RunTest:                                                      *
 * 1. Reads an 8 bit ascii character, Char.                            *
 * 2. Break the 8 bit Char into 4 bit, hex1 & hex2, for display.       *
 * 3. Check hex1 & hex2 to see which macros to call to display on LCD. *
 * Each case in the switch statement matches the value of the display. *
 ***********************************************************************/
 static macro proc RunTest (keyboardPtr)
 {
	unsigned 8 Char;
	unsigned 4 hex1, hex2;

   /* 
	* Two while loops run in parallel.
	*/
	par
	{	
		while (1)
		{
			// Write digit to seven segment display.
			PalSevenSegWriteDigit (PalSevenSegCT (0), hex1, 0);
			PalSevenSegWriteDigit (PalSevenSegCT (1), hex2, 0);

			// Read character value from keyboard.
			PalKeyboardReadASCII (keyboardPtr, &Char);

			// Break Char into hex1 & hex2.	
			hex1 = Char \\ 4;
			hex2 = Char <- 4;		  		 	 
		}// end while 1

	   /********************************************************
		* Total of seven segments. In this while loop the      *
		* switch statement will check the current hex1 & hex2  *
		* value. It will then call the segments that are needed*   
		********************************************************/
		while (1)
		{
			par
			{
			   /*
			    * Check hex1, hex1 will determine which segment is needed
				*/
				switch (hex1)
		 		{
		 		case 0:
			 		par
			 		{
						Segment1A ();
						Segment1B ();
						Segment1C ();
						Segment1D ();
						Segment1E ();
						Segment1F ();
			 		}
			 		break;

		 		case 1:
			 		par
			 		{
						Segment1B ();
						Segment1C ();
					}
					break;

		 		case 2:
			 		par
			 		{
						Segment1A ();
						Segment1B ();
						Segment1D ();
						Segment1E ();
						Segment1G ();
			 		}
			 		break;
		 
		 		case 3:
			 		par
			 		{
						Segment1A ();
						Segment1B ();
						Segment1C ();
						Segment1D ();
						Segment1G ();
					}
			 		break;
		 
		 		case 4:
			 		par
			 		{
						Segment1B ();
						Segment1C ();
						Segment1F ();
						Segment1G ();
			 		}
			 		break;
		 
		 		case 5:
			 		par
			 		{
						Segment1A ();
						Segment1C ();
						Segment1D ();
						Segment1F ();
						Segment1G ();
			 		}
			 		break;
		 
		 		case 6:
			 		par
			 		{
						Segment1A ();
						Segment1C ();
						Segment1D ();
						Segment1E ();
						Segment1F ();
						Segment1G ();
			 		}
			 		break;
	   	 
		 		case 7:
			 		par
			 		{
						Segment1A ();
						Segment1B ();
						Segment1C ();
			 		}
			 		break;
		 
		 		case 8:
			 		par
			 		{
						Segment1A ();
						Segment1B ();
						Segment1C ();
						Segment1D ();
						Segment1E ();
						Segment1F ();
						Segment1G ();
			 		}
			 		break;
		 
		 		case 9:
			 		par
			 		{
						Segment1A ();
						Segment1B ();
						Segment1C ();
						Segment1D ();
						Segment1F ();
						Segment1G ();
			 		}
			 		break;
		 
		 		case 10:
			 		par
			 		{
						Segment1A ();
						Segment1B ();
						Segment1C ();
						Segment1E ();
						Segment1F ();
						Segment1G ();
			 		}
			 		break;
		 
			 	case 11:
				 	par
			 		{
						Segment1C ();
						Segment1D ();
						Segment1E ();
						Segment1F ();
						Segment1G ();
			 		}
			 		break;
		 
		 		case 12:
			 		par
			 		{
						Segment1A ();
						Segment1D ();
						Segment1E ();
						Segment1F ();
			 		}
			 		break;
		 
			 	case 13:
				 	par
			 		{
						Segment1B ();
						Segment1C ();
						Segment1D ();
						Segment1E ();
						Segment1G ();
			 		}
			 		break;
		 
		 		case 14:
			 		par
			 		{
						Segment1A ();
						Segment1D ();
						Segment1E ();
						Segment1F ();
						Segment1G ();
			 		}
			 		break;
		 
				case 15:
			 		par
			 		{
						Segment1A ();
						Segment1E ();
						Segment1F ();
						Segment1G ();
					}
			 		break;
		 		}// end switch1
 /****************************************************************************/
 			   /*
			    * Check hex2, hex2 will determine which segment is needed.
				*/
 				switch (hex2)
		 		{
		 		case 0:
			 		par
			 		{
						Segment2A ();
						Segment2B ();
						Segment2C ();
						Segment2D ();
						Segment2E ();
						Segment2F ();
			 		}
			 		break;

		 		case 1:
			 		par
			 		{
						Segment2B ();
						Segment2C ();
					}
					break;

		 		case 2:
			 		par
			 		{
						Segment2A ();
						Segment2B ();
						Segment2D ();
						Segment2E ();
						Segment2G ();
			 		}
			 		break;
		 
		 		case 3:
			 		par
			 		{
						Segment2A ();
						Segment2B ();
						Segment2C ();
						Segment2D ();
						Segment2G ();
					}
			 		break;
		 
		 		case 4:
			 		par
			 		{
						Segment2B ();
						Segment2C ();
						Segment2F ();
						Segment2G ();
			 		}
			 		break;
		 
		 		case 5:
			 		par
			 		{
						Segment2A ();
						Segment2C ();
						Segment2D ();
						Segment2F ();
						Segment2G ();
			 		}
			 		break;
		 
		 		case 6:
			 		par
			 		{
						Segment2A ();
						Segment2C ();
						Segment2D ();
						Segment2E ();
						Segment2F ();
						Segment2G ();
			 		}
			 		break;
	   	 
		 		case 7:
			 		par
			 		{
						Segment2A ();
						Segment2B ();
						Segment2C ();
			 		}
			 		break;
		 
		 		case 8:
			 		par
			 		{
						Segment2A ();
						Segment2B ();
						Segment2C ();
						Segment2D ();
						Segment2E ();
						Segment2F ();
						Segment2G ();
			 		}	
			 		break;
		 
		 		case 9:
			 		par
			 		{
						Segment2A ();
						Segment2B ();
						Segment2C ();
						Segment2D ();
						Segment2F ();
						Segment2G ();
			 		}
			 		break;
		 
		 		case 10:
			 		par
			 		{
						Segment2A ();
						Segment2B ();
						Segment2C ();
						Segment2E ();
						Segment2F ();
						Segment2G ();
			 		}
			 		break;
		 
		 		case 11:
			 		par
			 		{
						Segment2C ();
						Segment2D ();
						Segment2E ();
						Segment2F ();
						Segment2G ();
			 		}
			 		break;
		 
		 		case 12:
			 		par
			 		{
						Segment2A ();
						Segment2D ();
						Segment2E ();
						Segment2F ();
			 		}
			 		break;
		 
		 		case 13:
			 		par
			 		{
						Segment2B ();
						Segment2C ();
						Segment2D ();
						Segment2E ();
						Segment2G ();
			 		}
			 		break;
		 
		 		case 14:
			 		par
			 		{
						Segment2A ();
						Segment2D ();
						Segment2E ();
						Segment2F ();
						Segment2G ();
			 		}
			 		break;
		 
				case 15:
			 		par
			 		{
						Segment2A ();
						Segment2E ();
						Segment2F ();
						Segment2G ();
					}
			 		break;
		 		}// end switch2
			}// end par
		}// end while 2

	}// end par
 }// end RunTest

 
/***********************************************************************
 * LCD size is 640 X 480.                                              *
 * Each segment macro will color green to a certain area on the LCD.   *
 * For example macro Segment1A () will color green in the range of     *
 * (50,50) to (75,150). This represents segment A on the seven segment *
 * display. Macro Segment1A to Segment2G have very similiar functions  *
 * the only difference is they all check a different area to color     *
 * green to.                                                           *
 * Macros RC200VideoOutGetX (), RC200VideoOutGetY (), and              *
 * RC200VideoOutWrite24 () are all found in rc200.hch.                 *                                                                                                                         
 ***********************************************************************
 *
 * Segment1.. are segment points for hex1 value.
 */
 static macro proc Segment1A ()
 {
	unsigned 12 x;
	unsigned 12 y;

	while ((RC200VideoOutGetX () <= 640) && (RC200VideoOutGetY () <= 480))
	{
	   /* 
	    * RC200VideoOutGetX () and RC200VideoOutGetY () scans for the x & y
		* values on the LCD. 
		*/
		x = RC200VideoOutGetX ();
		y = RC200VideoOutGetY ();
		
	   /*
	    * Write colour only when in the range of (50,50) to (75,150)
		* Write a different color for the background..
	    * RC200VideoOutWrite24 () writes the 24 bit color onto the LCD
		*/	
		if (x >= 50 && x <= 150 && y >= 50 && y <= 75)
		{ RC200VideoOutWrite24 (colour); }
		else 
		{ RC200VideoOutWrite24 (background); }
	}// end while
 }// end SegmentA ()

 /****************************************************************************/
static macro proc Segment1B ()
 {
	unsigned 12 x;
	unsigned 12 y;

	while ((RC200VideoOutGetX () <= 640) && (RC200VideoOutGetY () <= 480))
	{
		x = RC200VideoOutGetX ();
		y = RC200VideoOutGetY ();

		if (x >= 125 && x <= 150 && y >= 80 && y <= 180)
		{ RC200VideoOutWrite24 (colour); } 
		else 
		{ RC200VideoOutWrite24 (background); }
	}// end while
 }// end SegmentB ()

/*****************************************************************************/
static macro proc Segment1C ()
 {
	unsigned 12 x;
	unsigned 12 y;

	while ((RC200VideoOutGetX () <= 640) && (RC200VideoOutGetY () <= 480))
	{
		x = RC200VideoOutGetX ();
		y = RC200VideoOutGetY ();
		
		if (x >= 125 && x <= 150 && y >= 185 && y <= 285)
		{ RC200VideoOutWrite24 (colour);}
		else 
		{ RC200VideoOutWrite24 (background); }
	}// end while
 }// end SegmentC ()

/*****************************************************************************/
 static macro proc Segment1D ()
 {
	unsigned 12 x;
	unsigned 12 y;

	while ((RC200VideoOutGetX () <= 640) && (RC200VideoOutGetY () <= 480))
	{
		x = RC200VideoOutGetX ();
		y = RC200VideoOutGetY ();

		if (x >= 50 && x <= 150 && y >= 290 && y <= 315)
		{ RC200VideoOutWrite24 (colour); }
		else 
		{ RC200VideoOutWrite24 (background); }
	}// end while
 }// end SegmentD ()

/*****************************************************************************/
 static macro proc Segment1E ()
 {
	unsigned 12 x;
	unsigned 12 y;

	while ((RC200VideoOutGetX () <= 640) && (RC200VideoOutGetY () <= 480))
	{
		x = RC200VideoOutGetX ();
		y = RC200VideoOutGetY ();

		if (x >= 50 && x <= 75 && y >= 185 && y <= 285)
		{ RC200VideoOutWrite24 (colour); }
		else 
		{ RC200VideoOutWrite24 (background); }
		
	}// end while
 }// end SegmentE ()

/*****************************************************************************/
 static macro proc Segment1F ()
 {
	unsigned 12 x;
	unsigned 12 y;

	while ((RC200VideoOutGetX () <= 640) && (RC200VideoOutGetY () <= 480))
	{
		x = RC200VideoOutGetX ();
		y = RC200VideoOutGetY ();

		if (x >= 50 && x <= 75 && y >= 80 && y <= 180)
		{ RC200VideoOutWrite24 (colour); } 
		else 
		{ RC200VideoOutWrite24 (background); }
		
	}// end while
 }// end SegmentF ()

/*****************************************************************************/
 static macro proc Segment1G ()
 {
	unsigned 12 x;
	unsigned 12 y;

	while ((RC200VideoOutGetX () <= 640) && (RC200VideoOutGetY () <= 480))
	{
		x = RC200VideoOutGetX ();
		y = RC200VideoOutGetY ();

		if (x >= 50 && x <= 150 && y >= 155 && y <= 180)
		{ RC200VideoOutWrite24 (colour); }
		else 
		{ RC200VideoOutWrite24 (background); }
	}// end while
 }// end SegmentG ()

/****************************************************************************
 ****************************************************************************
 ****************************************************************************
 *
 * Segment2.. are segment points for hex2 value.
 */
 static macro proc Segment2A ()
 {
	unsigned 12 x;
	unsigned 12 y;

	while ((RC200VideoOutGetX () <= 640) && (RC200VideoOutGetY () <= 480))
	{
	   /* RC200 scans the LCD. Get the current value of x & y.
		* Write colour only when in the range of (50,50) to (75,150).
		*/
		x = RC200VideoOutGetX ();
		y = RC200VideoOutGetY ();

		if (x >= 200 && x <= 300 && y >= 50 && y <= 75)
		{ RC200VideoOutWrite24 (colour); }
		else 
		{ RC200VideoOutWrite24 (background); }
	}// end while
 }// end SegmentA ()

 /****************************************************************************/
static macro proc Segment2B ()
 {
	unsigned 12 x;
	unsigned 12 y;

	while ((RC200VideoOutGetX () <= 640) && (RC200VideoOutGetY () <= 480))
	{
		x = RC200VideoOutGetX ();
		y = RC200VideoOutGetY ();

		if (x >= 275 && x <= 300 && y >= 80 && y <= 180)
		{ RC200VideoOutWrite24 (colour); } 
		else 
		{ RC200VideoOutWrite24 (background); }
	}// end while
 }// end SegmentB ()

/*****************************************************************************/
static macro proc Segment2C ()
 {
	unsigned 12 x;
	unsigned 12 y;

	while ((RC200VideoOutGetX () <= 640) && (RC200VideoOutGetY () <= 480))
	{
		x = RC200VideoOutGetX ();
		y = RC200VideoOutGetY ();
		
		if (x >= 275 && x <= 300 && y >= 185 && y <= 285)
		{ RC200VideoOutWrite24 (colour);}
		else 
		{ RC200VideoOutWrite24 (background); }
	}// end while
 }// end SegmentC ()

/*****************************************************************************/
 static macro proc Segment2D ()
 {
	unsigned 12 x;
	unsigned 12 y;

	while ((RC200VideoOutGetX () <= 640) && (RC200VideoOutGetY () <= 480))
	{
		x = RC200VideoOutGetX ();
		y = RC200VideoOutGetY ();

		if (x >= 200 && x <= 300 && y >= 290 && y <= 315)
		{ RC200VideoOutWrite24 (colour); }
		else 
		{ RC200VideoOutWrite24 (background); }
	}// end while
 }// end SegmentD ()

/*****************************************************************************/
 static macro proc Segment2E ()
 {
	unsigned 12 x;
	unsigned 12 y;

	while ((RC200VideoOutGetX () <= 640) && (RC200VideoOutGetY () <= 480))
	{
		x = RC200VideoOutGetX ();
		y = RC200VideoOutGetY ();

		if (x >= 200 && x <= 225 && y >= 185 && y <= 285)
		{ RC200VideoOutWrite24 (colour); }
		else 
		{ RC200VideoOutWrite24 (background); }
		
	}// end while
 }// end SegmentE ()

/*****************************************************************************/
 static macro proc Segment2F ()
 {
	unsigned 12 x;
	unsigned 12 y;

	while ((RC200VideoOutGetX () <= 640) && (RC200VideoOutGetY () <= 480))
	{
		x = RC200VideoOutGetX ();
		y = RC200VideoOutGetY ();

		if (x >= 200 && x <= 225 && y >= 80 && y <= 180)
		{ RC200VideoOutWrite24 (colour); } 
		else 
		{ RC200VideoOutWrite24 (background); }
		
	}// end while
 }// end SegmentF ()

/*****************************************************************************/
 static macro proc Segment2G ()
 {
	unsigned 12 x;
	unsigned 12 y;

	while ((RC200VideoOutGetX () <= 640) && (RC200VideoOutGetY () <= 480))
	{
		x = RC200VideoOutGetX ();
		y = RC200VideoOutGetY ();

		if (x >= 200 && x <= 300 && y >= 155 && y <= 180)
		{ RC200VideoOutWrite24 (colour); }
		else 
		{ RC200VideoOutWrite24 (background); }
	}// end while
 }// end SegmentG ()

