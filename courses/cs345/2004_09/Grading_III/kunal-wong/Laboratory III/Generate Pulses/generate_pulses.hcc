//	generate_pulses.hcc

/****************************************************************
*                                                               *
* Copyright (C) 2004 Queens COllege. All rights reserved.    	  *
*                                                               *
*****************************************************************
*                                                               *
* Project   :   generate pulses                                 *
*                                                               *
* Builds on view waveforms project: endlessly and repeatedly    *
* generate a 1-msec pulse every 20 msec.  The pulse is          *
* represented by the variable pulse and connected to pin 3 of   *
* 3.16 ATA / Expansion Header on the RC200E device.             *
*                                                               *
*                                                               *
* Date      :   8 OCT 2004                                      *
* File      :   generate_pulses.hcc                             *
* Author    :   Huen Wong (HW) & Aroj Kunal (AK)                *
*                                                               *  
*                                                               *
* Contributors:                                                 *
*                                                               *
* Description:                                                  *
*    Laboratory III - Servomotor Controller                     *
*                                                               *
* Date         Version  Author  Reason for change               *
*                                                               *
* 18 SEPT 2004    1.00    HW & AK     Created.                  *
*                                                               *
****************************************************************/

#if (defined USE_RC200 || USE_RC200E)
#define PAL_TARGET_CLOCK_RATE 50000000
#define SW0 0
#define SW1 1
#define NUM_SWITCHES 2
#else
#define PAL_ACTUAL_CLOCK_RATE 1000000
set clock = external "P1"
  with
  {
    extlib  = "DKSync.dll",
    extinst = "1000",       // Period of 1MHz simulated clock
    extfunc = "DKSyncGetSet"
  };
#define SW0 8
#define SW1 9
#define NUM_SWITCHES 10
#endif
    
#include "stdlib.hch"
#include <pal_master.hch>

/*
 * Forward declarations
 */
static macro proc microsec_delay (Microseconds);

unsigned 1 pulse;
unsigned 0 dummyVar;
chan myChannel;

interface bus_out() motor( unsigned 1 out = pulse )
    with
    {
      #if (defined USE_RC200 || USE_RC200E)
        data  = { "M2" }  //  3.16 ATA / Expansion Header
      #else
        extlib  = "DKConnect.dll",
        extinst = "t(1)",
        extfunc = "DKConnectGetSet"
      #endif
    };


//  main()
//  ------------------------------------------------------------------
/*
 *  Endlessly and repeatedly write to myChannel the value of dummyVar,
 *  a 0-bit variable.  Then delay for 20000 microseconds
 *
 */

void main(void){
    
    //  Write to myChannel the value of dummyVar and delay for 20000
    //  microseconds. This is done repeatedly and endlessly.
    //  ------------------------------------------------------------
    while(1) 
    {
      myChannel ! dummyVar;
      microsec_delay(20000);
    }

}


//  main()
//  ------------------------------------------------------------------
/*
 *  Endlessly and repeatedly read from myChannel the value of dummyVar,
 *  a 0-bit variable.  Then set pulse to 1, delay for 1000
 *  microseconds, and set pulse to zero.
 *
 */

void main(void){

    //  Read from myChannel the value of dummyVar, set pulse to 1,
    //  delay for 1000 millisec. and set pulse to 0.  This is done
    //  repeatedly and endlessly.
    //  ------------------------------------------------------------
    while(1)
    {
      myChannel ? dummyVar;
      pulse = 1;
      microsec_delay(1000);
      pulse = 0;
    }
}

//  microsec_delay()
//  ------------------------------------------------------------------
/*
 *    Microsecond delay macroproc.  Does nothing for the specified
 *    number of microseconds.
 */

static macro proc microsec_delay (Microseconds)
{
    macro expr Cycles=(PAL_ACTUAL_CLOCK_RATE * Microseconds)/1000000;
    unsigned (log2ceil (Cycles)) sum;
    sum = 0;
    do
    {
        sum++;
    }
    while (sum != Cycles - 1);
}
