<HTML><HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Christopher Vickery">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.02 [en] (X11; I; SunOS 5.5 sun4m) [Netscape]">
   <TITLE>CS-731: Software Practicum</TITLE>
</HEAD>

<BODY BGCOLOR=#FFFFFF>

<CENTER><H1>CS-731: Software Practicum</H1></CENTER>

<H2>Background</H2>

CS-731 is one of three courses that Master's students may use to
satisfy the "capstone requirement" for the MA degree in Computer
Science at Queens College. The other two courses are CS-732 (Research
Practicum) and CS-733 (Master's Thesis).<P>

<H2>Prerequisites</H2>

CS-701, CS-707, or CS-718.<p>

Completion of 21 of the 30 credits required for the MA degree.

<H2>Description and Requirements</H2>

Each student designs and implements a "significant" programming project
for this course.  The definition of "significant" is imprecise, but a
rough guideline would be 1,000 lines of source code written in some
combination of Java, C, and C++.  Note that learning a new programming
language or development environment might be involved in doing a
project, but that such effort does not contribute to the "significance"
of the project for the purposes of this course. <p>

One faculty member acts as the advisor for all students registered for
CS-731 in a particular term.  Students may arrange to do their project
under the supervision of another faculty member, but the requirements
for the course are as outlined here regardless of who is the student's
advisor.<p>

There is an orientation session at the beginning of the term to cover
the requirements for the course and to answer student questions.  After
that, and in consultation with his or her faculty advisor, each student
chooses a project and develops a written proposal describing the
project and the implementation plan to be followed. More information
about the proposal is given in the <A HREF="#proposal">Proposal</A>
section below.  Once the proposal has been approved, the student
proceeds independently to implement the project as described in the
proposal.<p>

<H2>Project Scope</H2>

Usually, each student does a complete program or set of
programs by working alone. In unusual cases, a student's project might
be one part of an even larger software system. In such cases, the
student's part of the larger system must be a self-contained unit. For
example, if the larger system is an Integrated Development Environment,
the student's project might be the source code editor for the
IDE.

<H2>Project Management</H2>

Projects for this course are too large to be written as a monolithic
unit. Rather, the code must be developed as a set of modules that fit
together to make the final product. A typical project might be
constructed from 5 to 10 source code modules.<p>

Developing the project's modules must be done incrementally. That is,
the project must be developed as a sequence of steps, each of which
contributes to the development of the final project in a systematic
way. Each step must execute without error, although each one will have
reduced functionality compared to the final project. The student
demonstrates the code for the steps of the project to the advisor as
the project is being developed.<p>

The standard way to manage the project steps is to use a version control
system, such as RCS, so that each step in the development of each
module can be recreated even after later steps have been developed.  The
use of a version control system is highly recommended but not required. 
However, all development steps must be saved and made available
individually, and a version control system is the easiest way to meet
this requirement.<p>

There is an implementation of RCS for Windows 95/NT which is available
at no charge for academic use from <I>ComponentSoftware</I>.  Their web
page for "CS-RCS" is <a
href="http://www.componentsoftware.com/csrcs/swintro.htm">
www.componentsoftware.com/csrcs/swintro.htm</a>.

<H2>User Interface</H2>

Each project will normally incorporate a graphical user interface in
its design.  Naturally, there are projects for which a GUI is not
appropriate, but if there is an interactive user interface, it should
be graphical.

<H2><A NAME="proposal"></A>
Project Proposal</H2>

A written project proposal must be approved before the student develops
the code for the project.  The proposal has two parts: (1) A summary
that  describes the software to be developed along with any additional
information needed to understand the project, and (2) A list of the
steps to be followed in coding the project.<p>

The summary may be as short as a paragraph or two.  The list of
development steps consists of a paragraph for each step describing
exactly what will be done and how it fits into the overall structure of
the project.<p>

The proposal is developed in consultation with the advisor.  This
consultation consists of the student meeting with the advisor to discuss
the project, and then preparing the written proposal, which normally
needs to be revised based on feedback from the advisor.  For this
reason, students should submit a printed, double-spaced, hard copy of
the proposal for the advisor to make editorial comments on.  This
preliminary proposal may be submitted as a printout of either a plain
text file or a word-processor document, but not of a web page.  The
final version of the proposal is to be a printout of a word-processor
document developed by editing the preliminary proposal.<p>

Some experimentation may be needed to help decide exactly what the
development steps will be, but such experiments are not considered to be
part of the project itself.  Also code written before the written
proposal is approved will not be considered to be part of the project
either.<p>


<H2>Project Documentation</H2>

Three forms of written documentation must be submitted for the completed
project:

<OL>

<LI><B>Code Documentation.</B> All code must be commented in a way
that makes its structure, organization, and logic easy to understand.

<LI><B>User Documentation.</B> Supply information that tells people
how to use the program(s) that make up the project. This information
may take the form of a user's manual or online help, which may either
be integrated with the program(s) or separate, such as UNIX-style
<I>man</I> pages or HTML Web pages.

<LI><B>Management Documentation.</B> Provide written information that
tells how to install the software, how to recreate each step of the
project, and what functionality each step provides.

</OL>

<H2>
Development Environment</H2>

The development environment and programming languages used may be
anything that allows us to build and evaluate the project using the
department's resources. Generally, this means the project must be
written in C, C++, or Java, and must run on one of the
platforms/operating systems in a laboratory belonging to the
department: Sun/Solaris, SGI/Iris, or PC/Win32.

<H2><A NAME="ideas"></A>
Project Ideas</H2>

The student may develop virtually any type of software of interest:
Editors (text, image, audio, ...), games, Internet protocols, algorithm
animations, simulations, graphing or data visualization tools, database front
ends, software development tools, SGML processing tools ...<p>

The student's advisor will work with the student to make sure the
project involves a significant amount of programming, and is structured
carefully enough that it is definitely "do-able" once the proposal
has been approved.

<H2>
Filing Requirement</H2>

To complete the course, the student must submit a copy of the project
proposal, the written documentation, and all source code for the
project, which will remain on file with the department.  The department
will have the right to use this material for its educational and/or
research activities, including the right to distribute executable
copies of the code and User/Management documentation as part of those
activities.

<HR>
</BODY>
</HTML>
