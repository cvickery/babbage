<HTML><HEAD>
   <META NAME="Author" CONTENT="Christopher Vickery">
   <TITLE>CS-731: Software Practicum</TITLE>
</HEAD>

<BODY BGCOLOR=#FFFFFF>

<CENTER><H1>CS-731: Software Practicum</H1></CENTER>

<H2>Introduction</H2>

CS-731 is one of three courses that Master's students may use to satisfy
the "capstone requirement" for the MA degree in Computer Science at
Queens College. The other two courses are CS-732 (Research Practicum)
and CS-733 (Master's Thesis).<P>

<H2>Prerequisites</H2>

<UL>
  <LI><B>Competion of the Software Semicore Requirement</B>.<BR>

The software semicore courses (CS-701, CS-707, or CS-718, or a special
topics course identified as meeting the software semicore) require you
to do advanced programming in C, C++, or Java.

  <LI><B>Completion of 21 of the 30 credits required for the MA
  degree</B>.
</UL>

<H2>Description and Requirements</H2>

Each student designs and implements a "significant" programming project
for this course. The definition of "significant" is imprecise, but a
rough guideline would be over 1,000 lines of source code that you write
in some combination of Java, C, and C++. Note that learning a new
programming language or development environment does not contribute to
the "significance" of the project for the purposes of this course. You
should already be familiar with the development environment you will
use before you register for this course.<p>

One faculty member acts as the advisor for all students registered for
CS-731 in a particular term. However, students may arrange to do their
project under the supervision of another faculty member.  But the
requirements for the course are as outlined here regardless of who is
the student's advisor.<p>

In keeping with standard software engineering practice, each project
must go through a well-defined sequence of stages over the course of the
semester. In particular, all projects must meet the following
milestones, in the order indicated:

<OL>
  <LI>Approval of a Project Proposal
  <LI>Approval of a Development Plan
  <LI>Code Completion
  <LI>Project Submission
</OL>

Each of these milestones may be preceded by a number of iterations in
which you consult with your project advisor and make revisions based on
that consultation.<P>

These four milestones are described more fully in the sections below.

<H2>Project Proposal</H2>

<B>Deliverables:</B> A document, one page or less, which describes the
nature of the project you want to do.<P>

This milestone should be completed early, typically by the end of the
second week of the semester.<P>

At this stage, you are simply deciding what your project will be.  If
you already have an idea for a project, you can present it to your
advisor, and he or she will give you feedback on its suitability for
this course.  If you don't know what you want to do yet, it's a good
idea to come up with some thoughts about what kind of software you are
interested in writing, even if you aren't ready to be concrete yet.  One
way to approach this is to think of a program that you would like to
have but that isn't available (or costs too much).<P>

Some examples of projects ideas are:

<UL>

  <LI>Editors (text, sheet music, graphics, or audio, for example)

  <LI>Internet clients (telnet, http, or ftp for example)

  <LI>Games (perhaps one that you play over the network)

  <LI>Simulations or modeling programs (animated representations of
  computing algorithms; simulations of hardware or software systems,
  for example)

  <LI>Software developed as part of a research project (normally done
  as part of a faculty member's research program)

</UL>

Note that there is no requirement for your project to be novel. Just
because something has been done before doesn't mean that doing it again
wouldn't be an acceptable project.<P>

If you don't have any idea for a project yet, talk to your advisor about
it.<P>

Your advisor will help you develop or refine your proposal so that your
project meets the following criteria:<P>

<UL>

  <LI>The project must demonstrate the individual student's ability to
  do independent software design and development.  There will be no
  group or team projects for this course.

  <LI>The scope of the project must be such that it can reasonably be
  completed in one semester.  There is no policy against taking an INC
  and finishing a project after the semester is over, but the project
  should not be so big that it would automatically require you to work
  on it for more than one term.  This really is just a 3-credit course!

  <LI>The programming language must be Java, C, or C++.

  <LI>Each project will normally incorporate a graphical user interface
  in its design. There are projects for which a GUI is not appropriate,
  but if there is an interactive user interface, it should be graphical.

  <LI>The project must be self-contained.  This means that at the end
  you have to be able to submit all the code for the project and that
  we must then be able to build and test it using the computing
  facilities already available in the CS Department.  These facilities
  include Sun workstations using Sun's JDK or GNU C/C++ compilers, and
  PCs running Windows 9x/NT using Sun's JDK or Microsoft's Visual C++
  and the Windows SDK or MFC.

  <UL>

    <LI>We are specifically unable to handle projects that rely on
    commercially available database systems at this time.
    <LI>The project must not depend on any development environment
    beyond the facilities already available in the department for
    building and evaluating the project.
    
  </UL>

  <LI>There must be no commercial restrictions on the finished project.
  You can think of the project as you would a term paper for a course.
  You can do whatever you want to with it when you are finished, but
  Queens College will keep a copy of it and may make its own use of it
  for academic purposes too.

</UL>

The document you prepare for this first milestone, like all documents
for this course, is to be a printed (or printable) document with the
title of the project centered at the top of the page, with your name
centered underneath the title, and the date centered underneath your
name.  The proposal body is to be organized into three sections, each
beginning with an appropriate heading: Description, Development
Environment, and Evaluation.

In the Description section, give an overview of what the project will
do.  You may want to indicate what it is about the project that makes
you interested in it, but you don't need to "sell" the project to
anyone.<p>

In the Development Environment section, tell what development tools and
platform you intend to use.  Remember, you are expected to write the
code for your project yourself rather than rely on code generated by a
development tool.<p>

For many projects proposals, the Evaluation section may not be needed. 
But if there is any information a faculty member would need to know in
order to evaluate your final project, put it in this section.  For
example, if your project will use networking facilities, you should
indicate what those facilities are and how you see them being set up in
order to run your project.<p>



You may submit it as a word processor document or as a printed
page; the former is preferred. Do not submit web pages.

<H2>Development Plan</H2>

<B>Deliverable:</B> A document that names and describes a structured
sequence of "use cases" for the project.<P>

Each use case corresponds to a version of the program that can be
built and tested ("used") by itself. Subsequent use cases in the
sequence incorporate the functionality of previous use cases.<p>

The idea here is that you must design the project so that it can be
coded and tested incrementally.  Each use case represents a test point
that establishes that everything written so far works correctly, even
though the program does not implement its full functionality yet.  The
criterion for deciding whether a use case makes sense or not is whether
or not the correct operation of the program can be verified by running it
and observing its behavior.  While we normally think of a program in
terms of the sequence of operations a person would go through to use the
finished product, that sequence does not match the sequence of use cases
to be developed.<p>

For example, the first use case is typically to be able to start and
exit the program.  Even though exiting is the last thing the user
does when running the program, it's the first use case because all other
operations depend on being able to stop the program in a controlled
manner.<p>

Your advisor will help you develop an outline of appropriate use cases
for the project.<p>

You may need to write some prototype code while developing the
functional specification, especially if you are exploring a type of
software that you are not already familiar with.  This prototype code
might be written only so that you can verify that your project design
will actually work, and then be thrown away. Alternatively, it might
become the basis for one or more of the use cases in the final design. 
The point is that there will probably be multiple iterations in
developing the final Functional Specification document.

<H2>Code Completion</H2>

<B>Deliverables:</B>  Source code for all the use cases listed in the
Functional Specification document.<p>

The code must be structured as an appropriate set of  source modules. 
These modules will correspond to functional or structural elements of
the project, not to use cases.  A use case will normally add
functionality to one or more existing modules.<p>

As you complete each use case, test to make sure it operates properly,
and then save the source code for that case.  (You can do this
systematically by using a version control system such as RCS, which is
available for both the Solaris and PC platforms.)  Your advisor may ask
you to submit the first few use cases as they are completed in order to
verify that the project is on the right track.<p>

When all the use cases are completed, submit all the source code for all
the use cases in electronic form.  Your advisor must be able to compile
and run each use case.

<H2>Project Submission</H2>

<B>Deliverables:</B> Three forms of written documentation must be
submitted for the completed project:

<OL>

<LI><B>Code Documentation.</B> All code must be commented in a way that
makes its structure, organization, and logic easy to understand.<p>

For C and C++, you should follow the [&nbsp;<a
HREF="http://babbage.cs.qc.edu/courses/cs701/coding_guidelines.html">coding
guidelines given here</A>&nbsp;].<p>

For Java, write your comments in standard <I>javdoc</I> format, as
described in the "tools" documentation of Sun's Java Development Kit
(JDK).<p>

<LI><B>User Documentation.</B> Supply information that tells people
how to use the program(s) that make up the project. This information
may take the form of a user's manual or online help, which may either
be integrated with the program(s) or separate, such as UNIX-style
<I>man</I> pages or HTML Web pages.  You need to supply user
documentation only for the complete project, not for individual use
cases.

<LI><B>Management Documentation.</B> Provide written information that
tells how to install the software and how to recreate each use case.

</OL>

In addition, submit final versions of your Project Proposal and
Development Plan documents if they have changed since being approved by
your advisor.<p>

<HR>
</BODY>
</HTML>
