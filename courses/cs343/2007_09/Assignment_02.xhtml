<?php
  header("Vary: Accept");
  if (  array_key_exists("HTTP_ACCEPT", $_SERVER) &&
        stristr($_SERVER["HTTP_ACCEPT"], "application/xhtml+xml") ||
        stristr($_SERVER["HTTP_USER_AGENT"], "W3C_Validator")
      )
  {
    header("Content-type: application/xhtml+xml");
    header("Last-Modified: "
                    .gmdate('r',filemtime($_SERVER['SCRIPT_FILENAME'])));
    print("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
  }
  else
  {
    header("Content-type: text/html; charset=utf-8");
  }
 ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>CS-343 Assignment 2</title>
    <link rel="shortcut icon" href="../../favicon.ico" />
    <link rel="stylesheet"
              type="text/css"
              media="all"
              href="../../css/style-all.css" />
    <link rel="stylesheet"
              type="text/css"
              media="screen"
              href="../../css/style-screen.css" />
    <link rel="stylesheet"
              type="text/css"
              media="print"
              href="../../css/style-print.css" />
    <style type="text/css" media="all">
    	table { margin: 1em auto; }
    </style>
  </head>
  <body>
    <div id="header">
      <h1>CS-343 Assignment 2</h1>
      <h2>ALU Design and Construction</h2>
    </div>
    <div id="content">
      <h2>Introduction</h2>
      <div class="whitebox">

        <p>
          For this assignment, you are to implement the 32-bit ALU for the MIPs processor that is designed in Appendix B
          of the textbook. Your implementation of the ALU will be a real ALU, not a simulation.  You will use a software
          package called <span class="programName">Quartus</span> from a company called <a
          href="http://www.altera.com">Altera</a>. <span class="programName">Quartus</span> lets you design a logic
          circuit as a schematic diagram or by using a Hardware Description Language, such as Verilog. You will be doing
          this project as a schematic diagram. Once you have constructed your schematic diagram, you will use <span
          class="programName">Quartus</span> to generate a <span class="techTerm">programming file</span> that you will
          download into a logic device called a Field Programmable Gate Array (FPGA). FPGAs contain a huge number of
          gates and flip-flops along with special circuitry that allows the gates and flip-flops to be connected
          together in arbitrary ways. Downloading a configuration file into an FPGA sets the interconnections so that
          the FPGA actually implements the circuit you designed.
        </p>

        <p>
          Altera is one of the two largest FPGA manufacturers (the largest one is <a
          href="http://www.xilinx.com">Xilinx</a>). Both companies have very good programs to support students who are
          learning how to use their devices. For example, Altera has provided us with licenses to use the full version
          of <span class="programName">Quartus</span> in our lab for free. In addition, you can download a slightly less
          extensive version for free from their web site to use on your home computer if you wish. (The free version is
          more than adequate for the projects you will do in this course.) In addition to the <span
          class="programName">Quartus</span> software, Altera makes hardware kits available for student use. These kits
          have an FPGA mounted on a circuit board, plus the connectors needed for connecting the kit to a PC (for
          downloading programming files) and to other devices. In addition, the kits have a mixture of input and output
          devices, such as buttons, switches, and lights (LEDs, light emitting diodes). The kits you will be using are
          called DE-1, and are manufactured for Altera by a Taiwanese company called <a
          href="http://www.terasic.com">Terasic</a>. We have kits that you can use in the lab. In the past some students
          have bought their own kits to use at home; they can be ordered from the Terasic web site for about $150 and
          generally are delivered quite quickly.
          </p>

        <p>
          (Xilinx provides excellent support for students too. In fact, we use their FPGAs in the <a
          href="../../cs345">Hardware Lab Course (CS-345)</a>.)
        </p>
      </div>

      <h2>Project Description</h2>
      <div class="whitebox">
        <p>You will do the project in a sequence of steps, as described below.</p>
        <ol class="procedureList">
          <li><h5>Log into your lab account.</h5>
          <p class="runin">
            You can log into any one of the computers in SB room A-205 or A-227 using your account name for this course,
            which consists of your last name followed by the digits &ldquo;343&rdquo; all as a single lower-case string.
            Use the password &ldquo;343&rdquo;; you will be required to change it to something secure the first time you
            log in.
          </p>
          <p>The names of the computers are:</p>
          <table  summary="Lists of computer names in A-205 and A-227." id="computers">
            <tr> <th>A-205</th>     <th>A-227</th>    </tr>
            <tr> <td>birch</td>     <td>apple</td>    </tr>
            <tr> <td>cherry</td>    <td>fir</td>      </tr>
            <tr> <td>chestnut</td>  <td>juniper</td>  </tr>
            <tr> <td>elm</td>       <td>mimosa</td>   </tr>
            <tr> <td>ginkgo</td>    <td>peach</td>    </tr>
            <tr> <td>hemlock</td>   <td>pine</td>     </tr>
            <tr> <td>hickory</td>   <td>plum</td>     </tr>
            <tr> <td>&nbsp;</td>    <td>spruce</td>   </tr>
            <tr> <td>&nbsp;</td>    <td>sycamore</td> </tr>
            <tr> <td>&nbsp;</td>    <td>walnut</td>   </tr>
          </table>
          <p>
            Room 205 is an &ldquo;open lab,&rdquo; which means you can use the computers there any time you want. The
            secretaries in the CS Department Office (A-202) will open the lab for you if it is closed. Room 227 is a
            closed lab, so you will not be able to sit at the computers in that room to use them. However, all of the
            computers are accessible from the Internet. If you have access to a computer running Windows XP or Vista
            with a broadband connection, you can use <span class="programName">Remote Desktop </span> to log in. From
            the <span class="menuItem">Start</span> button, go to <span class="menuItem">Programs</span>, to <span
            class="menuItem">Accessories</span>, to <span class="menuItem">Communications</span>, and you will find it.
            When it asks you what computer you want to connect to, pick one of the names above and add the domain name
            &ldquo;.cs.qc.edu&rdquo; to the computer name. For example, you would log into <span
            class="computerName">ginkgo</span> by entering <span class="computerName">ginkgo.cs.qc.edu</span>.
          </p>
          <p>
            If you are using a Macintosh, OS X comes with a Remote Desktop program you can use in the same way as the
            Windows version. Under preferences, be sure to set a screen size and resolution to match your
            computer&rsquo;s screen. The default value is very low resolution, making it difficult to use.
          </p>
          <p>
            There an open source version of Remote Desktop at <a href="http://www.rdesktop.org">www.rdesktop.org</a>
            that might be useful if you are running Linux. But I have had no experience with it.
          </p>
          <p class="standoutBlock">
            When you use Remote Desktop, select one of the computers in A-227 so that students who are on campus will be
            able to use the computers in A-205. Only one person can use a computer at a time, so if the computer you try
            is occupied, just try another one until you find one that is available.
          </p>

          </li>
          <li><h5>Build a simple testbed.</h5>
            <p class="runin">
              I am supplying a <a <?php echo "title=\"Last Updated: ".date("Y-m-d", filemtime("DE1_Testbed.zip"))."\"";
              ?> href="DE1_Testbed.zip">testbed and some Verilog code</a> for you to work with for this project.  You
              will also need to reference the <a href="../Pins_DE1.xhtml">DE1 Pin Assignments Chart</a> for setting up
              your project.
            </p>
            <p>
              Create a directory named <span class="directoryName">Assignment_02</span> under the <span
              class="directoryName">My Projects</span> directory that is already present under the <span
              class="directoryName">My Documents</span> directory in your lab account. Unzip <span
              class="fileName">DE1_Testbed.zip</span> into this directory, giving you three files: <span
              class="fileName">DE1_Testbed.bdf</span>, <span class="fileName">hex2sevenseg.v</span>, and <span
              class="fileName">Device_Under_Test.bsf</span>. If you are interested, you can look at the contents of
              these files using a text editor like <span class="programName">Vim</span> or <span
              class="programName">Notepad++</span> (two text editors that are installed in the lab), but don&rsquo;t
              change anything in them. The .bdf file is a &ldquo;Block Diagram (schematic) File&rdquo;, like the ones
              you will be creating for this assignment. The .bsf file is a &ldquo;Block Symbol File,&rdquo; which
              simply tells Quartus how to draw a symbol without specifying the actualy circuitry the symbol represents.
              Finally, the .v file is a Verilog implementation of a module that converts a four-bit binary number into
              the correct outputs to respresent the binary number as a hexadecimal digit on a seven-segment display.
            </p>
            <p>
              Set up your project as demonstrated in class. The project directory is <span
              class="directoryName">>Assignment_02</span>, and the top-level design element is named <span
              class="codeSnippet">DE1_Testbed</span>. Include all three of the files from the zip file in the project.
              Right now, if you open the DE1_Testbed.bdf file, you will have input and output pins for all the switches,
              lights (LEDs), and seven-segment displays on the DE1. There are also instances of the hex2sevenseg module
              for each of the (four) seven-segment displays, and an instance of the &ldquo;Device Under Test&rdquo;
              symbol, which is just a place-holder for whatever circuit you are going to design.
            </p>
            <p>
              To start, create a new schematic file for your ALU. As mentioned in class, the assignment requires
              you only to build a 4-bit ALU. Doing a full 32-bit implementation is something you may undertake as
              an optional step if you want to do it. In your schematic, put input and output pins to match all the
              inputs and outputs of the 4-bit MIPS ALU: 4 inputs for the A operand (<span
              class="variableName">Aoperand[3..0]</span>), 4 inputs for the B operand (<span
              class="variableName">Boperand[3..0]</span>), 4 inputs for the function code (<span
              class="variableName">function[3..0]</span>), 4 outputs for the result (<span
              class="variableName">ALUout[3..0]</span>), and four outputs for the condition code (<span
              class="variableName">CVNZ[3..0]</span>). Once you have the pins in place, you can save the schematic: use
              the name Mini-MU or something else to indicatate that it is a small version of the MIPS ALU. Then create a
              symbol for the block diagram: File-&gt;Create/Update-&gt; Create Symbol Files for Current File. You should
              be able to go back to the top-level schematic, delete the Device_Under_Test symbol, and insert the symbol
              for the ALU that you just created. Connect the four Key inputs through four inverters to the function code
              input of the ALU; connect switches 7..4 to the A operand, switches 3..0 to the B operand, the result to
              the seven-segment display named Hex1, and connect the condition code bits to Hex0. Ignore unused inputs,
              and connect unused outputs in the testbed to ground.
            </p>
            <p>
              At this point, you should be able to compile your project for the first time. Fix any red error messages,
              but ignore all warnings for now. Now go to the <span class="menuItem">Assignments-&gt;Pins</span> menu
              item to bring up the Pin Assignments editor. Use the table on the Pin assignments web page to fill in all
              the pin assignments for the DE1.
            </p>
            <p>
              Build a simple circuit in your ALU schematic: Connect the A operand to the Result outputs and the B
              operand to the Condition Code outputs. You should be able to compile the project now; there will still be
              some warnings about unconnected inputs, but the process should finish.
            </p>
            <p>
              Plug a DE1 board into one of the USB ports on the computer and verify that it starts going through its
              &ldquo;dancing lights&rdquo; routine. Go to the device programmer
              (third icon from the right on the toolbar, or use the <span class="menuItem">Tools</span> menu), check the
              box in the Program/Configure column. Verify that the Hardware Setup says &ldquo;USB Blaster&rdquo; near
              the top of the panel (if it doesn&rsquo;t, you need to be sure the DE1 is plugged into a USB port, and to
              click the &lsquo;Hardware Setup&rdquo; button to select the USB blaster manually. Click Start to program
              the board, and verify that you can control two right-hand seven segment displays using the eight
              swithches.
            </p>
          </li>
          <li>
            <h5>Set up one bit slice.</h5>
            <p class="runin">
              The ALU will consist of four Bit Slices. Start a new block diagram, and set up the following input pins:
              <span class="variableName">Ain</span>, <span class="variableName">Bin</span>, <span
              class="variableName">Cin</span>, <span class="variableName">function[3..0]</span>, and <span
              class="variableName">SLTin</span>. Add the following output pins: <span
              class="variableName">result</span>, <span class="variableName">Cout</span>, and <span
              class="variableName">SLTout</span>. Save the file, naming it <span class="fileName">bitslice.bdf</span>,
              and convert it to a symbol file.
            </p>
          </li>
          <li>
            <h5>Create the elements needed to implement a bit slice.</h5>
            <p class="runin">
              To implement a bit slice you will need a 4&times;1 MUX and a full adder. You will also need two circuits
              for inverting the operands, which you may implement either by building a 2&times;1 MUX or by using XOR
              gates; the XOR gates are already available in the Quartus library, but you will have to create schematics
              for the others. Set up the input and output pins according to the following table:
            </p>
            <table>
              <tr>
                <th>Element</th><th>Suggested Name</th><th>Inputs</th><th>Outputs</th>
              </tr>
              <tr>
                <th>Full Adder</th><td><span class="variableName">FA</span></td><td><span class="variableName">Ain,
                Bin, Cin</span></td><td><span class="variableName">Sum, Cout</span></td>
              </tr>
              <tr>
                <th>4&times;1 MUX</th><td><span class="variableName">Mux_4x1</span></td><td><span
                class="variableName">sel[1:0], In_0, In_1, In_2, In_3</span></td><td><span
                class="variableName">Y</span></td>
              </tr>
              <tr>
                <th>2&times;1 MUX</th><td><span class="variableName">Mux_2x1</span></td><td><span
                class="variableName">sel, In_0, In_1</span></td><td><span class="variableName">Y</span></td>
              </tr>
            </table>
          </li>
          <li>
            <h5>Complete the Design and Test it.</h5>
            <p class="runin">
              Once you have the lowest-level blocks built, implement them using gates and wires.
            </p>
            <p>
              The bit-slice design is essentially the same as in the textbook. One possible difference from the textbook
              is your choice of whether to use 2&times;1 MUX&rsquo;s or XOR gates to complement the inputs. Remember
              that <span class="variableName">function[3]</span> is the <span class="variableName">Ainvert</span> input
              to the slice; <span class="variableName">function[2]</span> is the <span
              class="variableName">Bnegate</span> input; and <span class="variableName">function[1:0]</span> are used to
              control the 4&times;1 MUX.
            </p>
            <table>
              <tr><th><span class="variableName">function</span> Bits</th><th>Usage</th></tr>
              <tr><th><span class="variableName">function[3]</span></th><td>A<span class="subscript">invert</span></td></tr>
              <tr><th><span class="variableName">function[2]</span></th><td>B<span class="subscript">negate</span></td></tr>
              <tr><th><span class="variableName">function[1..0]</span></th><td>Select which output value: AND, OR, FA, SLT</td></tr>
            </table>
            <p>
              A definite difference from the textbook is the addition of the <span class="variableName">SLTin</span> and
              <span class="variableName">SLTout</span> input and output pins, which we will use to connect the slices
              together in the 4-bit ALU. Connect the Result output of the Full
              Adder to the <span class="variableName">SLTout</span> output pin, and connect the <span
              class="variableName">SLTin</span> input pin to the #3 input of the 4&times;1 MUX.
            </p>
            <p>
              Construct the ALU itself using four instances of the bit-slice block. The <span
              class="variableName">function[3..0]</span> inputs go to all four slices, but you have to connect the four
              bits from each operand to the appropriate slice.  Connect the <span class="variableName">Cout</span> and
              <span class="variableName">Cin</span> pins between the slices; connect <span
              class="variableName">function[2]</span> to <span class="variableName">Cin</span> of Full Adder zero (the
              rightmost one). Include the logic for generating the four condition code bits. Connect the <span
              class="variableName">SLTin</span> of all but the rightmost slice to ground, and connect the <span
              class="variableName">SLTout</span> of the leftmost slice to the <span class="variableName">SLTin</span> of
              the rightmost bit.
            </p>
          </li>
          <li>
            <h5>Compile and Test Your ALU</h5>
            <p class="runin">
              Once you get your project to compile and download successfully, you need to test it and repair errors that
              you find.  To give a common setup for testing, configure the top-level (testbed) design as follows:
              connect Hex3 and Hex2 to the A and B input operands, Hex1 to <span class="variableName">ALUout</span>, and
              Hex0 to <span class="variableName">CVNZ</span>. Connect the four bits of the function code (the inverted
              Key inputs) to green LEDs 0 through 3.
            </p>
            <p>
              Be sure you test various combinations of positive and negative operands against at least the most common
              function codes: A&and;B, A&or;B, A+B, A&minus;B, and SLT(A, B).
            </p>
          </li>
        </ol>
      </div>
      
      <h2>Submit the Assignment</h2>
      <div class="whitebox">
        <p>
          When your project is ready, send me an email message telling me it is ready for
          me to review.  I will get a copy of your project from your account on the lab server(<span
          class="computerName">maple</span>), so there is no need to tell me which computer you were working on. Just
          tell me that the project is ready for me to look at.
        </p>
        <p>
          Send your email to me by midnight of the due date. My email address is: <span class="emailAddress
          codeBlock">vickery at babbage.cs.qc.edu</span>.
        </p>
        <p class="standout_block">
          <strong>You must use exactly this Subject line for your email to be sure I actually receive it:</strong> <span
          class="codeBlock">CS-343 Assignment 2</span>. (Include the "CS-343" part in the subject line of <em>all</em>
          messages you send to me this semester.)
        </p>
        <p>
          If you do not receive an &ldquo;OK, I&rsquo;ll check it out!&rdquo; reply from me within a day or two of
          submitting the assignment, it means I did not receive it. But I will be sending that acknowledgement manually,
          so don&rsquo;t resubmit the assignment until I have had a chance to reply to the first one.
        </p>
      </div>
    </div>
    <div id="footer">
      <p class="links">
        <a href="../../../index.xhtml">Vickery Home</a>&nbsp;-&nbsp;<a
           href="http://validator.w3.org/check?uri=referer"> XHTML</a>&nbsp;-&nbsp;<a
           href="http://jigsaw.w3.org/css-validator/check/referer"> CSS</a>
      </p>
      <p><em>Last updated <?php echo date("Y-m-d", filemtime($_SERVER['SCRIPT_FILENAME'])); ?>.</em></p>
    </div>
  </body>
</html>
