<?php
  header("Vary: Accept");
  if (  array_key_exists("HTTP_ACCEPT", $_SERVER) &&
        stristr($_SERVER["HTTP_ACCEPT"], "application/xhtml+xml") ||
        stristr($_SERVER["HTTP_USER_AGENT"], "W3C_Validator")
      )
  {
    header("Content-type: application/xhtml+xml");
    header("Last-Modified: "
                    .gmdate('r',filemtime($_SERVER['SCRIPT_FILENAME'])));
    print("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
  }
  else
  {
    header("Content-type: text/html; charset=utf-8");
  }
 ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

  <head>

    <title>CS-343 Assignment 3</title>

    <link rel="shortcut icon" href="../favicon.ico" />
    <link rel="stylesheet"
          type="text/css"
          media="all"
          href="../../css/style-all.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="screen"
          href="../../css/style-screen.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="print"
          href="../../css/style-print.css"
    />
    <link rel="stylesheet" type="text/css" media="all"
          href="../../css/assignments.css" />
    <link rel="stylesheet" type="text/css" media="all"
          href="css/assignment_03.css" />
  </head>

  <body id='urn:uuid:892949F8-FCE8-457B-ADF5-5FC6AE586C7A'>
    <div id="header">
      <h1>CS-343 Assignment 3<br />Fall 2009</h1>
    </div>
    <div id="content">
      <h2>Introduction</h2>
      <div class="whitebox">
        <p>
          Be sure you are keeping up to date with the <a href="../syllabus.xhtml#reading-assignments">reading
          assignments for the course</a>.
        </p>
        <p>
          For this assignment, you are to implement a 4-bit version of the MIPS ALU developed in Appendix C of the
          textbook. The DE1 logic kits could easily handle a full 32-bit implementation, except that the limited number
          of switches, keys lights would make it difficult to test such a device easily.
        </p>
      </div>
      <h2>The Assignment</h2>
      <div>
        <ol>
          <li>
            <h5>Set up the project</h5>
            <p class="run-in">
              Create a directory named <span class="directory-name">Assignment_03</span> under your <span
              class="directory-name">My Projects</span> directory. Be sure to name and capitalize and spell the
              directory name exactly as shown: I will use a script to retrieve your project from the server, and it will
              depend on that. Note the underscore in the name.
            </p>
            <p>
              Download <a href="../hex2sevenseg.v">hex2sevenseg.v</a>, a Verilog code module that you will need for this
              assignment, and put it in your <span class="directory-name">Assignment_03</span> directory.
            </p>
            <p>
              Use the New Project wizard to set up the project just as you did for Assignment 2. The directory for the
              assignment is to be <span class="directory-name">Assignment_03</span>, and the top-level design entity is
              to be <span class="function-name"> Assignment_03_Testbed</span>. When the wizard asks if you want to add
              files to the project, say yes and add <span class="file-name">hex2sevenseg.v</span>, which should appear
              in the files list because you just copied it there.
            </p>
          </li>
          <li>
            <h5>Create a symbol for hex2sevenseg.v</h5>
            <p class="run-in">
              Seven segment displays are ubiquitous, so you are familiar with them even if you didn&rsquo;t know that
              was what they are called. The DE1 has four of them, and we are going to use all four of them for this
              assignment. Each display digit can show any of sixteen characters by lighting up different combinations of
              the seven segments:
            </p>
            <p class="code-block">
  _       _   _       _   _   _   _   _   _       _      _  _
 | |   |  _|  _| |_| |_  |_    | |_| |_| |_| |_  |   _| |_ |_
 |_|   | |_   _|   |  _| |_|   | |_|   | | | |_| |_ |_| |_ |
            </p>
            <p>
              These sixteen characters, of course, are a perfect match for displaying hexadecimal digits. The Verilog
              module I am supplying accepts a 4-bit binary number as its input, and outputs the correct settings for the
              seven segments to display the corresponding hexadecimal digit.
            </p>
            <p>
              Open <span class="file-name">hex2sevenseg.v</span> in quartus, and create a symbol for it, just as if it
              was a block diagram file. This will cause the code to be compiled: make sure there are no mistakes in the
              process. The symbol will have a four-wire input named <span class="variableName">Hex[3..0]</span>, and a
              seven-wire output named <span class="variableName">Segments[6..0]</span>.  The conventional way to name
              the segments of a seven-segment display is with the letters A&mdash;G (or a&mdash;g), like this:
            </p>
            <p class="code-block">
           A
         F   B
           G
         E   C
           D
            </p>
            <p>
              The <span class="variableName">Segments</span> subscripts 0&mdash;6 correspond to segment letters
              A&mdash;G, in that order.
            </p>
          </li>
          <li>
            <h5>Create the top-level module, <span class="variableName">Assignment_03_Testbed</span></h5>
            <p class="run-in">
              Create a new block diagram to use as the testbed for the assignment, as demonstrated in class on September
              22. There will be input pins for the four bits of operand A, the four bits of operand B, and the four
              function code bits. There will be output pins for the seven segments of Hex_0, the seven segment display
              to be used to show the ALU result, and another seven segments for Hex_1, which will be used to display the
              condition code outputs. After class, I decided it would be easier to test the project if we also use
              Hex_3 to display the value of the A operand, and Hex_2 to display the value of the B operand.
            </p>
            <p>
              As demonstrated in class, you can use one pin symbol to generate an array of pins. Name one input pin
              symbol <span class="variableName">Switch[3..0]</span>, a second pin symbol <span
              class="variableName">Switch[7..4]</span>, and a third one <span class="variableName">Key[3..0]</span>. The
              four output pin symbols should be named <span class="variableName">Hex_0[6..0]</span>, <span
              class="variableName">Hex_1[6..0]</span>, <span class="variableName">Hex_2[6..0]</span>, and <span
              class="variableName">Hex_3[6..0]</span>, insert four copies of the <span
              class="variableName">hex2sevenseg</span> symbol, and connect the outputs to the four output pin arrays.
            </p>
            <p>
              Run Analysis &amp; Synthesis, ignore all the warnings, and go to the Pin Planner, where you should find
              all the input and output pins listed. Use the <a href="../Pins_DE1.xhtml">DE1 I/O Pins</a> web page, and
              make the pin assignments. Note that the table uses the letters A&mdash;G for the segments of the
              seven-segment arrays, but your output pins use subscript values 0&mdash;6 for these.
            </p>
          </li>
          <li>
            <h5>Create a symbol for the ALU and add an instance of it to the testbed.</h5>
            <p class="run-in">
              Create a new block diagram file for the entire ALU. Again there will be three arrays of input pins, but
              their names will be: <span class="variableName">A[3..0]</span>, <span class="variableName">B[3..0]</span>,
              and <span class="variableName">Function[3..0]</span>.  There will be two arrays of output pins: <span
              class="variableName">Result[3..0]</span> and <span class="variableName">CVNZ[3..0]</span>.
            </p>
            <p>
              Save this block diagram, without filling in the contents yet, with the name &ldquo;MIPS_ALU&rdquo;. Create
              a symbol for this diagram, and insert one copy of the symbol in the testbed. Connect ALU inputs <span
              class="variableName">A[3..0]</span> to testbed inputs <span class="variableName">Switch[7..4]</span>.
              Likewise, connect switches 3&mdash;0 to the B inputs, and keys 3&mdash;0 to the <span
              class="variableName">Function</span> inputs of the ALU. But, in the testbed, invert the values of the keys
              before connecting them to the <span class="variableName">Function</span>. The <span
              class="variableName">lpm_inv</span> Megafunction will generate the four inverters as a single symbol. Look
              in the megafunctions folder of the Altera library under the Symbol Tool for it.
            </p>
            <p>
              At this point, also connect <span class="variableName">Switch[7..4]</span> to the hex2sevenseg symbol that
              drives Hex_3 so you will be able to see the A operand value in the leftmost seven-segment display.
              Likewise, connect <span class="variableName">Switch[3..0]</span> to Hex_2. When complete, your testbed
              should look like this: (How to see a full-resolution copy of the image depends on which browser you are
              using. For Firefox, right-click on it, and select &ldquo;View Image.&rdquo;)
            </p>
            <p>
              <img src="images/03_testbed.png" alt="Schematic Diagram of Assignment 3 Testbed" />
            </p>
          </li>
          <li>
            <h5>Create a symbol for one slice of the ALU.</h5>
            <p class="run-in">
              Create a new block diagram file for one bit-slice of the ALU. There will be eight separate (individual)
              input pins for <span class="variableName">A</span>, <span class="variableName">B</span>, <span
              class="variableName">Cin</span>, <span class="variableName">SLTin</span>, <span
              class="variableName">Ainv</span>, <span class="variableName">Bneg</span>, <span
              class="variableName">f_1</span>, and <span class="variableName">f_0</span>. There will be three output
              pins: <span class="variableName">Cout</span>, <span class="variableName">Result</span>, and <span
              class="variableName">SLTout</span>.
            </p>
            <p>
              Name this diagram &ldquo;Bit_Slice&rdquo;, save it as a symbol, and add four copies of this symbol to the
              MIPS_ALU schematic.
            </p>
          </li>
          <li>
            <h5>Complete the ALU schematic.</h5>
            <p class="run-in">
              When you added the four slices symbols to the ALU schematic, they were each given a name that appears in
              the lower-left corner of the symbol, names like &ldquo;inst_3&rdquo;; rename them &ldquo;Slice_3&rdquo;,
              &ldquo;Slice_2&rdquo;, &ldquo;Slice_2&rdquo;, and &ldquo;Slice_0&rdquo; by double-clicking on the instance
              names and typing over them. I suggest you lay out the slices vertically with Slice 3 on top.
            </p>
            <p>
              Here is a description of what you have to do to complete the ALU schematic. This screenshot of the top
              half (leftmost two slices) of the ALU should help make some of the points clear.
            </p>
            <p>
              <img src="images/03_ALU.png" alt="Slices 2 and 3 of the 4-bit MIPS ALU" />
            </p>
            <ul>
              <li>
                Connect the <span class="variableName">Cout</span> of each slice to the <span
                class="variableName">Cin</span> of the next slice. <span class="variableName">Cout</span> of slice 3
                goes to pin <span class="variableName">CVNZ[3]</span>.  <span class="variableName">Cin</span> of slice 0
                connects to <span class="variableName">Bneg</span>; there are a number of places you could make this
                connection&mdash;I did it right next to the inputs for slice 0.
              </li>
              <li>
                <span class="variableName">SLTin</span> for slices 1&mdash;3 are connected to logic 0. Look under the
                &ldquo;other&rdquo; folder of the primitives in the Symbol Tool, and locate the symbol for ground (gnd),
                which is equivalent to the logic 0 value.  You can put in one ground symbol and connect it to all three
                slices. If you prefer, you can put in three separate instances, one for each slice.
                <p>
                  Connect <span class="variableName">SLTout</span> of slice 3 to <span class="variableName">SLTin</span>
                  of slice 0. The <span class="variableName">SLTout</span> from slices 0&mdash;2 do not connect to
                  anything.
                </p>
                <p>
                  In the figure, you can see the wire leaving <span class="variableName">SLTout</span> from slice 3 on
                  its way down to <span class="variableName">SLTin</span> of slice 0, and you can see that <span
                  class="variableName">SLTout</span> from slice 2 doesn&rsquo;t go anywhere. Also, you can see that
                  there is a wire connecting <span class="variableName">SLTin</span> for slices 2 and 3; it goes down to
                  slice 1, and then connects to ground.
                </p>
                <p>
                  SLT stands for &ldquo;Set Less Than,&rdquo; one of the MIPS machine language instructions. We will go
                  over what this is all about in class.
                </p>
              </li>
              <li>
                The A and B input pins get connected to the A and B inputs of the slices. You can pull out Bus Lines
                from the A and B pin arrays, and connect node lines (wires) from each slice to the bus lines.
                Right-click on the node line, and select the bottom menu item (Properties) to name the node lines so the
                subscripts match the slice numbers.
                <p>
                  The four function inputs connect to the <span class="variableName">Ainv</span>, <span
                  class="variableName">Bneg</span>, <span class="variableName">f_1</span>, and <span
                  class="variableName">f_0</span> inputs of all four slices.  <span class="variableName">Ainv</span>
                  connects to <span class="variableName">Function[3]</span>, <span class="variableName">Bneg</span>
                  connects to <span class="variableName">Function[2]</span>, <span class="variableName">f_1</span>
                  connects to <span class="variableName">Function[1]</span>, and <span class="variableName">f_0</span>
                  connects to <span class="variableName">Function[0]</span>. (I called <span
                  class="variableName">Function[3..0]</span> &ldquo;<span class="variableName">Func[3..0]</span>&rdquo;
                  in the figure.)
                </p>
                <p>
                  See the top left part of the figure. Don&rsquo;t forget that <span
                  class="variableName">Function[2]</span>, the <span class="variableName">Bneg</span> inputs to all the
                  slices, and the <span class="variableName">Cin</span> input to slice 0 are all connected together.
                </p>
              </li>
              <li>
                Condition code bits <span class="variableName">CVNZ[2..0]</span> correspond to &ldquo;oVerflow,&rdquo;,
                &ldquo;Negative,&rdquo;, and &ldquo;Zero&rdquo; respectively.
                <p>
                  On October 1 we will discuss two&rsquo;s complement overflow in class. The figure shows a trick for
                  telling when the result (of addition or subtraction) cannot be represented correctly in the number of
                  bits available (4 bits in this case): if the carry into the leftmost slice (slice 3) is different from
                  the carry out of that slice, overflow has occurred, otherwise not. The XOR gate on the right side of
                  the figure will generate a 1 when its two inputs are different from each other, and a 0 otherwise.
                </p>
                <p>
                  The Negative condition code bit (<span class="variableName">CVNZ[1]</span>) is true whenever the
                  leftmost bit of the result is 1. So <span class="variableName">CVNZ[1]</span> is really the same as
                  <span class="variableName">Result[3].</span> But you cannot use two different names for the same node
                  line in Quartus. To solve this problem, insert a &ldquo;wire&rdquo; symbol that does nothing
                  logically, but breaks a node line into two parts that can be given different names. The wire comes
                  from the &ldquo;buffer&rdquo; folder of the Symbol Tool. You can see the wire symbol (it looks like an
                  inverter without a bubble on the output) on the right side of the figure.
                 </p>
                 <p>
                  The Zero condition code bit (<span class="variableName">CVNZ[0]</span> is true whenever
                  all four result bits are 0. The 4-input NOR gate on the right side of the figure takes
                  care of this.
                 </p>
              </li>
            </ul>
            <p>
              Run Analysis &amp; Synthesis when you have completed the ALU schematic. There will still be lots of
              warnings, but there should be no error messages. If you do get any error messages (they appear in red),
              you can click on them to be taken to the part of the schematic that caused the problem. (The busses,
              wires, and/or symbols causing the problem will be highlighted.) Most often problems will be due to
              mis-naming bus and/or node lines: check your typing carefully.  There is no point in going any further
              until all errors are fixed at this stage.
            </p>
          </li>
          <li>
            <h5>Complete the bit slice schematic.</h5>
            <p class="run-in">
              The bit slice module is fully designed in the textbook. You can simplify the Quartus implementation in a
              few ways.
            </p>
            <p>
              First, you can use the Altera <span class="variableName">lpm_mux</span> megafunction to implement the
              4&times;1 multiplexer for selecting the output rather than assemble all the AND, OR, and NOT gates. I
              found it convenient to right-click on the symbol and flip it vertically, making the data inputs line up
              better with the AND, OR, full-adder, and SLT elements of the schematic. &ldquo;Your mileage may
              vary.&rdquo;
            </p>
            <p>
              I constructed a separate schematic module for the full adder; there is no megafunction that gives you just
              one full adder (at least, not that I could find). Convert the schematic into a symbol, and add the symbol
              to the schematic for the bit slice.
            </p>
            <p>
              The <span class="variableName">SLTin</span> input pin goes to input #3 of the 4&times;1 multiplexer. The
              <span class="variableName">SLTout</span> output pin connects directly to the <span
              class="variableName">Sum</span> output of the full adder, which also goes to input #2 of the 4&times;1
              mux.
            </p>
            <p>
              The textbook uses 2&times;1 multiplexers to select whether the A and/or B inputs should be inverted or not
              before going to the AND, OR, and full adder. Rather than build the multiplexers (or use a megafunction),
              you might find it easier just to use an XOR gate. For example, <span
              class="variableName">A'</span>&nbsp;=&nbsp;<span class="variableName">A</span>&nbsp;&#x2295;&nbsp;<span
              class="variableName">Ainv</span> will make <span class="variableName">A'</span> the same as <span
              class="variableName">A</span> if <span class="variableName">Ainv</span> is 0, but will make it the
              opposite of <span class="variableName">A</span> if <span class="variableName">Ainv</span> is 1.
            </p>
            <p>
              With this module implemented, you should be able to do a complete Analysis and Synthesis of the project.
              There should be no error messages and only the following two warnings:
            </p>
            <p>
              <img src="images/03_warning_messages.png" alt="The two warning messages you should get and may ignore" />
            </p>
            <p>
              If you get any errors and/or any warnings other than those two, fix the problems before proceeding.
            </p>
          </li>
          <li>
            <h5>Test the project.</h5>
            <p class="run-in">
              Testing the project is a critical component of the assignment. Paradoxically, you will learn the most if
              you have errors to correct: by reasoning about what causes wrong behavior, you will get a better sense of
              how the ALU works.
            </p>
            <ol>
              <li>
                Start with all the slide switches off and the four keys not pressed. The four hexadecimal displays
                should show 0010.
                <div class="explanation">
                  <p>
                    The left two digits are zeros are because all the slide switches are off. The 1 (0001<span
                    class="subscript">2</span>) indicates Carry, oVerflow, and Negative are all false (zero); but the
                    Zero bit is true (one). The right zero is the result, which is indeed zero. The result is zero
                    because the function is 0000<span class="subscript">2</span> (no keys are pressed), which says not
                    to invert A, not to negate B, and to AND the two operands: 0000 &amp; 0000 =&gt; 0000.
                  </p>
                </div>
                <p>
                  If the display is something other than 0010, you need to determine whether the problem is in how the A
                  and B operands are being passed to the seven segment displays (the problem is in the testbed); how the
                  condition code bits are being computed (probably a problem in the ALU module where the condition code
                  bits are generated), or in the design of the bit slice (how the A and B bits get ANDed together and
                  how the output of the AND gate goes from input number 0 of the 4&times;1 mux to the result output of
                  the slice).
                </p>
              </li>
              <li>
                One by one, starting at the right end, slide each slide switch into the on position. The hex displays
                should show the values 0010, 0110, 0310, 0710, 0F10, 1F81, 3F83, 7F87, and FFAF in that sequence.
                <div class="explanation">
                <p>
                  As you slide switches 0&mdash;3 up, you are generating the binary values 1, 3, 7, and 15 for the B
                  operand; the second hex digit shows those values. So far, the condition code and result values
                  don&rsquo;t change because the A operand is still all zeros, and ANDing anything with zero is always
                  zero.
                </p>
                <p>
                  As you slide switches 4&mdash;7 up, the left hex digit shows the binary values 1, 3, 7, and 15 for the
                  A operand. Because the B operand is all ones at this point, the result matches the value of the A
                  operand. That is, the left digit and right digit are the same. (1 &amp; X =&gt; X).
                </p>
                <p>
                  For A operand values 1, 3, and 7, the condition code value is hex 8 (1000<span
                  class="subscript">2</span>). The value of the Z bit (on the right) is off because the result is no
                  longer zero. The C bit is also set, which is an artifact: even though the output of the full adders is
                  not being output as the result, the sum of the two operands is still being computed, and adding any of
                  these values to 15 produces a carry out of the leftmost full adder, which shows up as the C bit of the
                  condition code being 1.
                </p>
                <p>
                  When the A operand is 15, the condition code changes to hex A (1010<span class="subscript">2</span>).
                  There is still a carry out of the leftmost full adder. But in addition, the N bit is set, indicating
                  that the result (1111<span class="subscript">2</span>) is a negative value.
                </p>
                </div>
              </li>
              <li>
                Slide all the switches off, and press the two leftmost pushbuttons (Key 3 and Key 2). The display should
                change from 0010 to 00AF.
                <p class="explanation">
                  Key 3 inverts the value of the A operand, (0000 =&gt; 1111), and Key 2 does the same to the value of
                  the B operand (with the added feature that
                  <span class="variableName">C<span class="subscript">0</span></span> is
                  also set to 1). So the full adders are computing 1111+1111+1 =&gt; 1110 with a carry out from the
                  leftmost full adder, which shows up as the C bit of the condition code. But the result displayed is
                  the output of the AND gates: 1111<span class="subscript">2</span>. There was no overflow, but the
                  result is a negative value, and is not zero.
                </p>
                <p class="standout-block">
                  Note that the C and V condition code bits are logically irrelevant when performing AND, OR and SLT
                  functions.
                  But they are generated anyway, and looking at their values can help verify that the circuit is working
                  correctly.
                </p>
              </li>
              <li>
                Verify that the OR operation is working correctly by pressing Key 0 and entering various values for the
                A and B operands. For example 4 | 1 =&gt; 5; C | A =&gt; E, etc.
              </li>
              <li>
                Verify that the Add operation is correctly by pressing Key 1 for different combinations of A and B
                operands. Add two positive values that do not overflow: 3 + 4 =&gt; 7 with C, V, N, and Z all zero.
                Add two positive values that do overflow: 5 + 5 =&gt; A (which is the two&rsquo;s complement
                representation of negative 6). The condition code bits should be 6 (V and N) because there was
                overflow and the result (which &ldquo;should&rdquo; be positive) appears to be negative. Perform
                similar experiments with negative operands that do and do not overflow.
              </li>
              <li>
                Check subtraction. Press Keys 2 (<span class="variableName">Bneg</span>) and 1 (select the full
                adder outputs from the 4&times;1 muxes).
                <table>
                  <tr>
                    <td>0090</td>
                    <td class="explanation">
                      0 - 0 is calculated as 0 + F + 1, so the the C bit is set because the carry in on the right
                      propagates all the way across to the carry out on the left. The Z bit is set because the result
                      is zero.
                    </td>
                  </tr>
                  <tr>
                    <td>0F01</td>
                    <td class="explanation">
                      0 minus -1 is calculated as 0 + 0 + 1 = +1, with no carry, no overflow, not negative, and not zero.
                    </td>
                  </tr>
                  <tr>
                    <td>786F</td>
                    <td class="explanation">
                      7 minus -8 is calculated as 7 + 7 + 1 = F (which is -1, not the 15, the &ldquo;correct&rdquo;
                      answer. There is no carry out the left end, but there is overflow (there is a carry into the
                      leftmost bit, but not a carry out), the result appears to be negative, so the N bit is set, and
                      the result is not zero, so the Z bit is not set.
                    </td>
                  </tr>
                  <tr>
                    <td>6E68</td>
                    <td class="explanation">
                      6 minus -2 is calculated as 6 + D + 1 = 8. This wrong; the answer should be +8, but that value
                      cannot be represented in four bits. The V and N bits are set because the result is wrong and
                      appears to be negative (8 is the two&rsquo;s complement representation of -8).
                    </td>
                  </tr>
                </table>
              </li>
              <li>
                Check the SLT function. With everything above working correctly, you can check the SLT function
                without worrying about the condition code settings, just the result. The result should be hex 0
                (0000<span class="subscript">2</span>) any time the value of operand A is not less than the value of
                operand B. And it should be 1 (0001<span class="subscript">2</span>) whenever the value of operand
                A is less than operand B. Perform the SLT function by pressing Keys 0, 1. and 1. (Keys 0 and 1
                combine to select the bottom output of the 4&times;1 mux in the slices; Key 2 causes the B operand
                to be negated so the full adders compute A-B.) Here are some of the display values you should see:
                5590 (5 is equal to 5, not less than it); 5601 (5 is less than 6) F081 (hex F is -1, which is less
                than 0); F890 (-1 is not less than -8).
              </li>
            </ol>
          </li>
        </ol>
      </div>
      <h2>Sample Exam Questions</h2>
      <div>
        To give you an idea of the types of exam questions based on this assignment that I might ask, there is
        a web page,
        <a href="Assignment_03_Exam_Questions.xhtml">Sample Exam Questions Based On CS-343 Assignment 3</a>, that
        you can use as a study guide. There&rsquo;s no guarantee that any of these questions will actually appear
        on the exam, of course. But they might help you focus on some of the important concepts.
      </div>

      <h2>Submit The Assignment</h2>
      <div>
        <ol>
          <li>
            Once you have tested that your ALU works as specified, simply log out of your account so that your project
            will be copied back to oak, where I will go to get a copy for grading. Send me an email message when your
            assignment is ready.  </li>
          <li>Be sure to put your name in your email message!</li>
          <li>
            <p  class="standout-block">
              Do not submit the assignment until you have actually tested it to be sure it works. If you tested it but
              cannot get it to work in time, you may submit the assignment for partial credit provided you tell me in
              your email what problem(s) you observed during testing.
            </p>
          </li>
          <li>
            The Subject line must be <span class="code-snippet">CS-343 Assignment 3</span> to avoid my spam
            filters.
          </li>
          <li>
            Send your email to either Christopher.Vickery<span class="at" title="Change to @">AT</span>qc.cuny.edu or
            vickery<span class="at" title="Change to @">AT</span>babbage.cs.qc.cuny.edu &mdash; but not to both.
          </li>
        </ol>
        <p>
          See <a href="../index.xhtml">the course syllabus</a> for grading and late homework policies.
        </p>
      </div>
    </div>
    <div id="footer">
      <a  href="../../../">Vickery Home</a>&mdash;<a
          href="../syllabus.xhtml">CS-343 Syllabus</a>&mdash;<a
          href="./">Course Schedule</a>&mdash;<a
          href="http://validator.w3.org/check?uri=referer">XHTML</a>&mdash;<a
          href="http://jigsaw.w3.org/css-validator/check/referer">CSS</a>&mdash;Last
          updated <?php echo date("Y-m-d", filemtime($_SERVER['SCRIPT_FILENAME'])); ?>
    </div>
  </body>
</html>

