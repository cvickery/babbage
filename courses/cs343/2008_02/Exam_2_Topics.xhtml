<?php
  header("Vary: Accept");
  if ( (array_key_exists("HTTP_ACCEPT", $_SERVER) &&
        stristr($_SERVER["HTTP_ACCEPT"], "application/xhtml+xml"))
       ||
       (array_key_exists("HTTP_USER_AGENT", $_SERVER) &&
        stristr($_SERVER["HTTP_USER_AGENT"], "W3C_Validator"))
     )
  {
    header("Content-type: application/xhtml+xml");
    header("Last-Modified: "
                    .gmdate('r',filemtime($_SERVER['SCRIPT_FILENAME'])));
    print("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
  }
  else
  {
    header("Content-type: text/html; charset=utf-8");
  }
 ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
          "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>

    <title>CS-343 Exam 2 Topics</title>

    <link rel="shortcut icon" href="../favicon.ico" />
    <link rel="stylesheet"
          type="text/css"
          media="all"
          href="../../css/style-all.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="screen"
          href="../../css/style-screen.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="print"
          href="../../css/style-print.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="all"
          href="css/assignments.css"
    />
  </head>

  <body>

    <div id="header">
      <h1>CS-343 Exam 2 Topics</h1>
    </div>

    <div id="content">
      <h2>Introduction</h2>
      <div>
        <p>
          The exam on April 8 will include all material since the first exam. Where necessary, you will need to remember
          material covered earlier, but the exam will not be cumulative in the sense that there will not be any explicit
          questions on the material tested in the first exam.
        </p>
        <p>
          The exam will cover material from sections B.7 through B.11, Chapters 2 and 4, and sections 5.1 through 5.4 of
          the textbook. The emphasis will be on material actually covered in class and in the assignments.
        </p>
        <p>
          You will be provided with a copy of panel 1 of the &ldquo;MIPS Green Card&rdquo; to use during the exam.
        </p>
      </div>
      <h2>The Topics</h2>
      <div>
        <ul>
          <li>Sequential logic: latches, flip-flops, finite state machine design, and counter design</li>
          <li>Design and operation of the MIPS Register File</li>
          <li>
            The MIPS Instruction Set Architecture
            <ul>
              <li>
                Memory size and addressing
                <ul>
                  <li>Byte and word addresses</li>
                </ul>
              </li>
              <li>Instruction formats and how they are used</li>
              <li>Register file organization and characteristics</li>
            </ul>
          </li>
          <li>Formula for calculating the execution time of programs</li>
          <li>Comparing the performance of computers</li>
          <li>Using Verilog to describe the behavior of instructions</li>
          <li>Writing and running MIPS assembly language programs</li>
          <li>Pseudo-instructions</li>
          <li>
            Relating assembly language syntactic fields to machine language bit fields
            <ul>
              <li>mnemonic =&gt; op_code</li>
              <li>leftmost register =&gt; <span class="functionName">rs</span></li>
              <li>etc.</li>
            </ul>
          </li>
          <li>
            Design of the single-cycle MIPS datapath
            <ul>
              <li>Structural elements: PC, Instruction Memory, Register File, ALU, Data Memory</li>
              <li>Which elements are clocked (and which are not); what happens on each clock edge</li>
              <li>Next address calculation</li>
              <li>
                What information the various fields of R-type, Jump, Branch, <span class="functionName">lw/sw</span>, 
                and arithmetic-instructions specify
              </li>
              <li>How the datapath is used to implement different types of instructions</li>
              <li>Op code decoding</li>
              <li>Generating control signals for the datapath (<span class="functionName">RegDst</span>, etc)</li>
            </ul>
          </li>
        </ul>
      </div>
    </div>

    <div id="footer">
      Last updated <?php echo date("Y-m-d", filemtime($_SERVER['SCRIPT_FILENAME']));
      ?>.<br />
      <a
        href="../../../">Vickery Home</a>&nbsp;-&nbsp;<a
        href="./">Course Schedule</a>&nbsp;-&nbsp;<a
        href="../">CSCI-343 Home Page</a><br /><a
        href="http://validator.w3.org/check?uri=referer">XHTML</a>&nbsp;-&nbsp;<a
        href="http://jigsaw.w3.org/css-validator/check/referer">
      CSS</a>
    </div>
  </body>
</html>
