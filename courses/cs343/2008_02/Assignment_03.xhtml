<?php
  header("Vary: Accept");
  if ( (array_key_exists("HTTP_ACCEPT", $_SERVER) &&
        stristr($_SERVER["HTTP_ACCEPT"], "application/xhtml+xml"))
       ||
       (array_key_exists("HTTP_USER_AGENT", $_SERVER) &&
        stristr($_SERVER["HTTP_USER_AGENT"], "W3C_Validator"))
     )
  {
    header("Content-type: application/xhtml+xml");
    header("Last-Modified: "
                    .gmdate('r',filemtime($_SERVER['SCRIPT_FILENAME'])));
    print("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
  }
  else
  {
    header("Content-type: text/html; charset=utf-8");
  }
 ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
          "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>

    <title>CS-343 Assignment 3</title>

    <link rel="shortcut icon" href="../favicon.ico" />
    <link rel="stylesheet"
          type="text/css"
          media="all"
          href="../../css/style-all.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="screen"
          href="../../css/style-screen.css"
    />
    <link rel="stylesheet"
          type="text/css"
          media="print"
          href="../../css/style-print.css"
    />        
    <link rel="stylesheet"
          type="text/css"
          media="all"
          href="css/assignments.css"
    />
  </head>

  <body>

    <div id="header">
      <h1>CS-343 Assignment 3</h1>
    </div>

    <div id="content">
      <h2>Introduction</h2>
      <div>
        <p>
          This assignment is to build one &ldquo;slice&rdquo; of the 32-bit MIPS ALU developed in the textbook.
        </p>
      </div>
      
      <h2>The Assignment</h2>
      <div>
        <h3>Set Up The Project</h3>
        <p>
          Starting with this assignment, you will be constructing your circuit from several modules
          that will be linked together. Furthermore, you are to use meaningful pin names for all of
          your modules, and to use one separate top-level &ldquo;testbed&rdquo; module to connect
          your schematics to the DE1 Kit&rsquo;s pins.
        </p>
        <p>
          For example, you will rename the pins for the Full Adder that you did for
          Assignment 2 so they have standard names: <span class="functionName">A</span>, <span
          class="functionName">B</span>, <span class="functionName">Cin</span>, <span
          class="functionName">Cout</span>, and <span class="functionName">Sum</span>.
        </p>
        <p>
          Start by creating a directory for this assignment: name it <span class="directoryName">ALU_Slice</span>,
          and create it immediately under your <span class="directoryName">My Projects</span> directory. Copy
          your <span class="fileName">Full_Adder.bdf</span> file from Assignment 2 into this directory. Also, I am
          providing three files that you will need for this assignment: download <a 
          href="Assignment_03_files.zip">Assignment_03_files.zip</a>, and extract the contents into your project
          directory now. Their use will be covered later on, but they need to be in place before you create the
          actual <span class="programName">Quartus</span> project for the assignment.
        </p>
        <p>
        	For this assignment, you will be using a different name for one of the files you just extracted. Rename
          <span class="fileName">DE1_Testbed.bdf</span> to <span class="fileName">ALU_Slice_Testbed.bdf</span>.
        </p>

        <h3>Create The Project</h3>
        <p>
        	Use the New Project Wizard to create the project for this assignment. Specify the <span
          class="directoryName">ALU_Slice</span> directory for the project location, use <span
          class="variableName">ALU_Slice</span> as the project name, but change the name of the top level design
          element to <span class="variableName">ALU_Slice_Testbed</span>. When the wizard panel for adding files
          to the project comes up, click the "Add All" button, and you should see <span
          class="fileName">ALU_Slice_Testbed.bdf</span> and <span class="fileName">hex2sevenseg.v</span> appear in
          the list.
        </p>
        <p>
        	The remainder of the new project wizard is the same as for Assignment 2. Make sure the part number is
          the Cyclone II EP2C20F484C7 is selected as the part number.
        </p>
        
        <h3>Create The ALU Slice</h3>
        <p>
        	With your new project open, you should be able to open your <span class="fileName">Full_Adder.bdf</span>
          schematic from Assignment 2. If you used switch and LED names for the inputs and outputs when you did
          Assignment 2, you need to change them to the standard Full Adder names now: <span
          class="functionName">A</span>, <span class="functionName">B</span>, and <span
          class="functionName">Cin</span> for the inputs; <span class="functionName">Sum</span> (or <span
          class="functionName">S</span>) and <span class="functionName">Cout</span> for the outputs. Save the
          updated schematic.
        </p>
        <p>
        	Make a symbol to represent the full adder. Go to the File menu, select &ldquo;Create/Update&rdquo;, and
          then &ldquo;Create Symbol Files for Current File&rdquo;. Quartus will create a new symbol that you can
          use as a building block in your ALU Slice. The symbol file will be named <span
          class="fileName">Full_Adder.bsf</span>, and you will be able to access it from the Symbol Tool by
          opening the Project folder instead of the quartus/libraries folder.
        </p>
        <p>
        	Now create a new schematic, named ALU_Slice. There will be eight inputs (A, B, Cin, Ainv, Bneg, SLTin,
          and the two function selects, F1 and F0), and three outputs (Result, Cout, and SLTout). You will also
          need to XOR gates (for complementing the data bits), and AND and an OR gate (for the two logic
          operations), an instance of your full adder symbol, and a 4&times;1 MUX. Connect everything as shown in
          the textbook and in class, save the file, and generate a block symbol file for it.
        </p>
        <p>Here are images of the symbols for the Full Adder and the ALU Slice:</p>
        <div id="basic-symbols">
          <img src="images/Full_Adder_Symbol.png" alt="Full Adder Symbol" />
          <img src="images/ALU_Slice_Symbol.png" alt="ALU Slice Symbol" />
        </div>
        <h3>Customize The Testbed</h3>
        <p>
          Once a design uses modules it makes sense to use a separate module, the &ldquo;top-level design,&rdquo; to
          manage the connections to the FPGA pins. The zip file contains such a &ldquo;testbed&rdquo; module, the one
          you renamed from <span class="fileName">DE1_Testbed.bdf</span> to <span
          class="fileName">ALU_Slice_Testbed.bdf</span> at the beginning of the assignment. This schematic contains pins
          for all the switches, buttons (keys), LEDs, seven segment displays, and one clock input on the DE1 Kit. It
          also includes an instance of the <span class="variableName">hex2sevenseg</span> module for each of the four
          seven segment displays. Finally, in the middle of the schematic is a block symbol named &ldquo;Device Under
          Test&rdquo; (DUT). Here is a picture of it. Depending on your browser, you should be able to view a
          full-resolution copy of the image by right-clicking on it or saving it and opening it separately:
        </p>
        <div id="testbed-images">
        	<img src="images/DE1_Testbed.png" alt="DE1 Testbed" title="DE1 Testbed" />
        </div>
        <p>
        	The idea is that it is easier to delete the parts of the testbed to customize it for a particular module
          that you want to test (DUT) than to add and name all the pins to a new testbed for each design. For this
          assignment, your DUT is your ALU_Slice, which has eight inputs (<span class="variableName">SLTin</span>,
          <span class="variableName">A</span>, <span class="variableName">B</span>, <span
          class="variableName">Cin</span>, and the four function bits) and three outputs (<span
          class="variableName">Result</span>, <span class="variableName">Cout</span>, and <span
          class="variableName">SLTout</span>. Actually testing the design is somewhat problematic because there are 256
          combinations of the 8 inputs. We will use four slide switches for the first four inputs, and the four keys
          (pushbuttons) for the function code bits. This way you can enter a set of data values and rapidly change the
          function code bits to be sure that all the functions (or at least the important ones) work for that combination
          of data values. 
        </p>
        <p>
          Use one of the seven segment displays to show the output values. Since there are only three bits, one of the
          four inputs to the display (the left one) will always be connected to logic 0 (GND), resulting in only numbers
          from 0 to 7 being displayed. For testing purposes, it is also useful to connect the switch and key inputs to
          LEDs so you can quickly see how they are set.
        </p>
        <p>
          This project doesn&rsquo;t use a clock, so that input can be eliminated along with the unused switches, LEDs,
          and seven segment displays. The customized testbed should look like the following image. (Again, use whatever
          your browser&rsquo;s mechanism provides for viewing a full-sized view of the image.)
        </p>
        <div id="testbed-images">
          <img src="images/ALU_Slice_Testbed.png" alt="ALU Slice Testbed" title="ALU Slice Testbed" />
        </div>
        <h3>Test Your Design</h3>
        <p>
          Once you have completed your design and compiled it once, you need to set up the pin assignments following
          the same procedure you did for Assignment 2.
        </p>
        <p>
          There is no need to go through all 256 input combinations to test your design, but you need to figure out some
          representative values and test that they come up &ldquo;right.&rdquo;
        </p>
        <p>
          The hex display will be a number between 0 and 7. If the rightmost output (<span
          class="variableName">Result</span>) is 1, the displayed value will be 1, 3, 5, or 7. If the middle output
          (<span class="variableName">Cout</span>) is 1, the displayed value will be 2, 3, 6, or 7. And if the left
          output (<span class="variableName">SLTout</span>) is true, the output will be 4, 5, 6, or 7. The bother in
          testing is that the values of <span class="variableName">SLTout</span> and <span
          class="variableName">Cout</span> are sometimes just side effects of the actual function being performed. For
          example, the only output that is really important for AND and OR is <span class="variableName">Result</span>,
          but the other two outputs will have irrelevant (but determinable) values that might be either zero or one.
        </p>
        <p>
          For example, if the <span class="variableName">A</span> input is true, the other three inputs are false, and
          the function code is 0001<span class="subscript">2</span> (AND), the result is zero, but the full adder will
          compute a sum of 1, which is connected to <span class="variableName">SLTout</span>, so the hex display will be
          4.
        </p>
        <p>
          Here are a couple of sample values, with explanations, to get you started:
        </p>
        <table class="truth-table">
         	<col span="8" class="input" /><col span="2" class="output" />
        	<thead>
            <tr>
              <th>SLT<span class="subscript">in</span></th>
              <th>A</th><th>B</th><th>C<span class="subscript">in</span></th>
              <th>A<span class="subscript">inv</span></th><th>B<span class="subscript">neg</span></th>
              <th>F<span class="subscript">1</span></th><th>F<span class="subscript">0</span></th>
              <th>SLT<span class="subscript">out</span>, C<span class="subscript">out</span>, Result</th>
              <th>Explanation</th>
            </tr>
          </thead>
          <tbody>
            <tr>
          	  <td>0</td><td>0</td><td>0</td><td>0</td>
          	  <td>0</td><td>0</td><td>0</td><td>0</td>
          	  <td>0</td><td class="left">0&and;0 is 0; no side effects</td>
            </tr>
            <tr>
          	  <td>0</td><td>1</td><td>0</td><td>0</td>
          	  <td>0</td><td>0</td><td>0</td><td>0</td>
          	  <td>4</td><td class="left">
              	1&and;0 is 0; but is 01<span class="subscript">2</span>, so SLT<span class="subscript">out</span> is 1.
              </td>
            </tr>
            <tr>
          	  <td>0</td><td>1</td><td>0</td><td>0</td>
          	  <td>0</td><td>0</td><td>0</td><td>1</td>
          	  <td>5</td><td class="left">1&or;0 is 1; SLT<span class="subscript">out</span> and Result are both 1.</td>
            </tr>
            <tr>
          	  <td>1</td><td>1</td><td>1</td><td>1</td>
          	  <td>0</td><td>1</td><td>1</td><td>1</td>
          	  <td>3</td><td class="left">SLT<span class="subscript">in</span> is 1, so Result is 1;
              1+~1+1 is 10<span class="subscript">2</span>, so SLT<span class="subscript">out</span> is 0 and
              C<span class="subscript">out</span> is 1.</td>
            </tr>
            <tr>
          	  <td>1</td><td>1</td><td>1</td><td>1</td>
          	  <td>1</td><td>1</td><td>1</td><td>1</td>
          	  <td>5</td><td class="left">SLT<span class="subscript">in</span> is 1, so Result is 1;
              ~1+~1+1 is 01<span class="subscript">2</span>, so SLT<span class="subscript">out</span> is 1 and
              C<span class="subscript">out</span> is 0.</td>
            </tr>
          </tbody>
        </table>
      </div>
      
      <h2>Submit The Assignment</h2>
      <div>
        <p>
          When you have built and tested your circuit, be sure to log out of your account so your
          project will be saved on the server. Then send an email message to me saying your project
          is ready; I will get a copy from your account on the server and check it out. Send your
          email to:
        </p>
        <address>
          Christopher.Vickery<span class="at" title="Change to @">AT</span>qc.cuny.edu
        </address>
        <p class="standout_block">
          Be sure the Subject Line of your email says <span
          class="codeblock">CS-343&nbsp;Assignment&nbsp;3</span>, just like that, to be sure your
          message does not get trapped by my spam filters.
        </p>
        <p>Be sure to sign your email so I can tell who sent it!</p>
      </div>
    </div>

    <div id="footer">
      Last updated <?php echo date("Y-m-d", filemtime($_SERVER['SCRIPT_FILENAME']));
      ?>.<br />
      <a 
        href="../../../">Vickery Home</a>&nbsp;-&nbsp;<a
        href="./">Course Schedule</a>&nbsp;-&nbsp;<a
        href="../">CSCI-343 Home Page</a><br /><a
        href="http://validator.w3.org/check?uri=referer">XHTML</a>&nbsp;-&nbsp;<a
        href="http://jigsaw.w3.org/css-validator/check/referer">
      CSS</a>
    </div>
  </body>
</html>
