<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">

<script>
<!--
if( window.name != "PPTOtl" )
  parent.location.href = "../701_Lecture_06.htm";
//-->
</script>
<meta name=Robots content=NoIndex>
</head>

<body bgcolor=black text=white link=white vlink=white alink=white>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0001.htm');">CS-701 Lecture 6</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>February 20, 2001</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Dr. Vickery</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0003.htm');">Administrivia</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Need to limit the number of guests</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Send me a “codeword” if you want to be
  able to check your grades online.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Assignments 1 and 2 are being graded
  only “ok” or “not ok.”</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Submit future assignments as email
  attachments.</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>Do not send executables.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>What is ^M in a typescript?</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Carriage return.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0002.htm');">Memory Structures</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>int main(int argc, char *argv[], char *env[])</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>argv and env are arrays of pointers to char</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>A pointer to char normally means a
  pointer to the first char of a null-terminated string</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Difference between</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>char *argv[]</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>char **argv</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0004.htm');">&quot;Pointer:&quot;</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Pointer: a variable that holds a memory
  address.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>char *x;<span style="mso-spacerun: yes">  </span>// x is a
  pointer to a char;<br>
  <span style="mso-spacerun: yes">               </span>// *x is a char.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun: yes"> 
  </span>*x = ‘A’;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>A C string is a sequence of character
  codes in successive memory bytes, terminated by an ASCII nul (‘\0’ or 0x00).</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>char *msg = “hello”;</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0005.htm');">&quot;char **y; // y...&quot;</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>char **y; // y is a pointer to a pointer to a char:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Notes:</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>‘A’ might be the beginning of a string</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>Or it might not be.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>There has to be memory allocated for
  the two pointers as well as for the character(s).</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>When the program is compiled or</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>When the program executes</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>The middle pointer might be the
  beginning of an array of pointers</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>Or it might not be.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0006.htm');">Arrays</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Successive array elements occupy
  successive memory locations.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Think of strings as arrays of char,
  with an ASCII nul at the end.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Other arrays may or may not be
  terminated in some way.<span style="mso-spacerun: yes">  </span>An array of
  ints would not be, but in many situations, arrays of pointers are terminated
  by null.</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>nul – an ASCII character code, 0x00.</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>null – a pointer with a numerical value of zero.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0007.htm');">Pointer Arithmetic</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>If you add an integer to a pointer, the
  compiler multiplies the value of the integer by the size of the variable type
  in memory.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Useful for traversing the elements of
  an array.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Chars always occupy bytes; shorts
  usually occupy 2 bytes, ints 4, and longs 8.<span style="mso-spacerun: yes"> 
  </span>But this is not required by the C language, which says only:</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>sizeof(short) &lt;= sizeof(int) &lt;= sizeof(long)</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>sizeof(char) &gt;= 1, sizeof(short) &gt;= 2, and sizeof(long)
  &gt;= 4</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0008.htm');">Declaring Arrays and
Pointers</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>char *msg = “hello”;</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>How big is msg?</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>What does msg = “good-bye”; do?</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>char msg[] = “hello”;</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>How big is msg?</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>What does msg = “good-bye”; do?</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>So what is char *argv[]?</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>A null terminated array of strings.</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>Unix, not the C language, guarantees
  the null.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0010.htm');">&quot;$ cat lecture.c&quot;</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>$ cat lecture.c</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>#include &lt;stdio.h&gt;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>#include &lt;string.h&gt;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>int</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>main( int argc, char *argv[], char
  *envp[] )</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>{</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun: yes"> 
  </span>char msg[] = &quot;hello&quot;;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>//<span style="mso-spacerun: yes"> 
  </span>msg = &quot;good-bye&quot;;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun: yes"> 
  </span>strcpy(msg, &quot;good-bye\n&quot;);<span style="mso-spacerun: yes"> 
  </span>// Copies 10 bytes into 6-byte array!</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun: yes"> 
  </span>printf(&quot;msg: %d\n&quot;, sizeof( msg ) );</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun: yes"> 
  </span>printf(&quot;&amp;msg: %d\n&quot;, sizeof( &amp;msg ) );</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun: yes"> 
  </span>printf(&quot;*msg: %d\n&quot;, sizeof( *msg ) );</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun: yes"> 
  </span>printf( msg );</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun: yes"> 
  </span>return 0;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>$ lecture</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>msg: 6</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&amp;msg: 8</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>*msg: 1</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>good-bye</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0011.htm');">Some Points About Pointers</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>char *msg = “hello”;</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Declares msg to be a pointer to char,
  creates a string, and assigns a pointer to the string to msg.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>char msg[] = “hello”;</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Declares msg to be an array of char,
  determines that the initializer is 6 bytes long, makes the array that large,
  and compiles the string into the array.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>char msg[6]; msg = “hello”;</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Syntax error because “hello” gives a
  pointer on the right side, but msg is an array of char on the left.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>char *msg; msg = “hello”;</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Okay; msg gets a pointer to the literal
  string in memory</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>char *msg; strcpy(msg, “hello”);</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Runtime error because msg hasn’t been
  initialized with a pointer to anything.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('slide0013.htm');">More Points About Pointers</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>char msg[] = “hello”;</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Now, msg and &amp;msg[0] are both
  pointers to the first byte of the array.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Both *msg = ‘J’; and msg[0] = ‘J’;
  change the string to “Jello”.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>*(msg + 4) = ‘a’; is the same as msg[4] = ‘a’;</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>msg[2] = ‘\0’; changes the string to “Je”.</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>Memory ends up with 4A 65 00 6c 6f
  00<br>
  <span style="mso-spacerun: yes">                                      
  </span>J<span style="mso-spacerun: yes">   </span>e<span style="mso-spacerun:
  yes">   </span>\0<span style="mso-spacerun: yes">  </span>l<span
  style="mso-spacerun: yes">    </span>o<span style="mso-spacerun: yes"> 
  </span>\0</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes"> </span>printf(“%s\n”, &amp;msg[3]);<span style="mso-spacerun: yes"> 
  </span>// would print “lo”</font></td>
 </tr>
</table>

</p>

</body>

</html>
