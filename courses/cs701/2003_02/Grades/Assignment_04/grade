#! /bin/bash

# Usage: grade [<directory>]

# If a directory is specified, use it.
#  Otherwise, Process all .dir directories.

dirs=$@
if [[ $dirs == "" ]]
then
  dirs="*.dir"
fi

# Grading loop starts here

for f in $dirs
do
  f=${f%.dir}
  report=${PWD}/$f.grade
  clear
  grep $f ../roster

  if [[ -e $report ]]
  then
    echo "Note: $f.grade already exists!"
    echo -n "Overwrite, Append, or Skip? [oaS] "
    read oas
    case $oas in
      [oO]*)  rm -f $f.grade
              in=yes
              ;;
      [aA]*)  in=yes
              ;;
      *)      in=no
              ;;
    esac
  else
    echo -n "Do it? "
    read in
  fi

  if [[ $in == "" || $in == y* ]]
  then
    if [[ ! -e $report ]]
    then
      grep $f ../roster > $report
      cat boilerplate >> $report
    fi

    cd $f.dir/*
    if [[ $? != 0 ]]
    then
      cat <<!!! >> $report 2>&1
*** Your tar file did not contain a project subdirectory.
*** Unable to process.
!!!
      exit 1
    fi

    rm -f vickery_*
    if [[ $(basename $PWD) == [vV]ickery ]]
    then
      cat <<!!! >> $report 2>&1

*** Your tar file was made from within the project subdirectory
    instead of from the directory above it.

Files Submitted
===============
!!!

    else cat <<!!! >> $report 2>&1

Contents of your Project Subdirectory
=====================================

$(/bin/ls -lG)

!!!
    fi

    /bin/ls -ldG RCS > /dev/null
    if [[ $? != 0 ]]
    then
      cat <<!!! >> $report 2>&1
*** There is no RCS subdirectory.
!!!
    fi

    cat <<!!! >> $report 2>&1

Running make clean:
==================

$(make clean 2>&1)

Running make depend:
====================
co -l Makefile
$(make depend 2>&1)

Building your program:
======================

$(make 2>&1)

Testing the program:
=====================

The grading program ran jsh and had it execute the following sequence of
commands.  (The commands themselves are not echoed to this report, just
your program's output.)

  date
  ls -l
  echo The exit code was \$?
  ls nosuchfile
  echo The exit code was \$?
  echo \$$ is this process' id
  nosuchcommand with silly arguments
  alias
  exit 23

The grading program then printed a message with the exit code of your
shell.

The output of your program was:
!!!
  ./jsh << !!! >> $report 2>&1
  date
  ls -l
  echo The exit code was \$?
  ls nosuchfile
  echo The exit code was \$?
  echo \$$ is this process' id
  nosuchcommand with silly arguments
  alias
  exit 23
!!!

  echo "Your shell's exit code was $?" >> $report 2>&1
  cat << !!! >> $report 2>&1

End of program testing.
=======================

  Was the Makefile correct?

    Yes

  Was RCS used correctly?

    Yes
  
  Did the program run correctly?

    Yes

Code Formatting and Coding Style:
=================================

$(chk_format *.cc 2>&1)
!!!
    chk_format *.cc > /dev/null 2>&1
    if [[ $? != 0 ]]
    then
      cat <<!!! >> $report 2>&1
*** There is at least one formatting error in your code.
    There should be NO tab characters and NO lines longer
    than 72 characters.
!!!
    else
      echo "    OK: No tabs and no long lines." >> $report
    fi

    cat <<!!! >> $report 2>&1

    Did the code adhere to the Coding Guidelines for the course?

      Yes
      No.  See the Coding Guidelines web page for the course.

    Other notes:

      None


Assignment Grade: 10.0/10.0
===========================

!!!

    ci Makefile << !!!
Vickery updated dependency list.
!!!
    co Makefile RCS/*cc,v RCS/*h,v

    xterm -geometry 80x64+514+0 -e vim  Makefile *.cc *.h &
    xterm -geometry 80x64+10+0 -e vim  $report &
    echo
    echo Quit this shell to continue to next student.
    /bin/bash

#   in=n
#   while [[ $in == n* ]]
#   do
#     echo -n "Finished? "
#     read in
#     [[ $in == n* ]] && ENV=~/.kshrc ksh
#   done
    cd ~/Courses/cs701/2003_02/Assignment_04

  fi

done

